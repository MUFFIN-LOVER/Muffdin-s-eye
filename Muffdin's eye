import telebot
from telebot import types
from datetime import datetime
import html
import re
import sqlite3
import random
import time

# –¢–æ–∫–µ–Ω –∏ ID —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
bot = telebot.TeleBot("8212352418:AAFFVGiW7LTr7ptinNTufmHlAvc7P_ECRck", parse_mode='HTML')
me = 8295751364  # –¢–≤–æ–π Telegram user ID

conn = sqlite3.connect("game.db", check_same_thread=False)
cursor = conn.cursor()

# —Ç–∞–±–ª–∏—Ü–∞ –∏–≥—Ä–æ–∫–æ–≤ (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ—á–∫–∏ –∏ –æ–±—â–∏–π —Ç–∞–π–º–µ—Ä)
cursor.execute("""
CREATE TABLE IF NOT EXISTS players (
    user_id INTEGER PRIMARY KEY,
    name TEXT,
    points INTEGER DEFAULT 0,
    last_dep INTEGER DEFAULT 0
)
""")

# —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —á–∞—Ç–∞–º–∏ (—á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ø —á–∞—Ç–∞)
cursor.execute("""
CREATE TABLE IF NOT EXISTS chats (
    user_id INTEGER,
    chat_id INTEGER,
    PRIMARY KEY(user_id, chat_id)
)
""")
conn.commit()

# === —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ===
items = [
    # –±–∞–∑–∞
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üí¥ ", "price": 5, "chance": 30},
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üíµ ", "price": 10, "chance": 25},
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üí∂ ", "price": 20, "chance": 20},
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üí∑ ", "price": 30, "chance": 15},

    # –ø–æ–≤–µ–∑–ª–æ
    {"emoji": "–Ω–∞—à—ë–ª üí∞ ", "price": 50, "chance": 10},
    {"emoji": "–Ω–∞—à—ë–ª üíé ", "price": 100, "chance": 5},
    {"emoji": "–æ–≥—Ä–∞—é–∏–ª –±–∞–Ω–∫ üè¶ ", "price": 200, "chance": 3},

    # –¥–∂–µ–∫–ø–æ—Ç
    {"emoji": "–Ω–∞—à—ë–ª üí≥ ", "price": random.randint(0, 500), "chance": 5},
    {"emoji": "–Ω–∞—à—ë–ª üìÄ —Å –±–∏—Ç–∫–æ–∏–Ω–∞–º–∏ ", "price": random.randint(300, 500), "chance": 2},

    # –ø–æ—Ç–µ—Ä—è
    {"emoji": "–ø—Ä–æ–ø–∏–ª üí∏ ", "price": -5, "chance": 15},
    {"emoji": "–¥–µ–ø–Ω—É–ª üí∏ ", "price": -10, "chance": 12},
    {"emoji": "–∑–∞–¥–æ–Ω–∞—Ç–∏–ª —Å—Ç—Ä–∏–º–µ—Ä—É üí∏ ", "price": -20, "chance": 10},

    # –ø–∞—Å—Ö–∞–ª–∫–∞
    {"emoji": "–≤—Å—Ç–µ—Ç–∏–ª Mr.Muffdinüëæ ", "price": 0.666, "chance": 1},
]

def roll_item():
    r = random.randint(1, sum(item["chance"] for item in items))
    cumulative = 0
    for item in items:
        cumulative += item["chance"]
        if r <= cumulative:
            # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–∂–µ–∫–ø–æ—Ç
            if item["emoji"] in ["–Ω–∞—à—ë–ª üí≥", "–Ω–∞—à—ë–ª üìÄ —Å –±–∏—Ç–∫–æ–∏–Ω–∞–º–∏"]:
                if item["emoji"] == "–Ω–∞—à—ë–ª üí≥":
                    item["price"] = random.randint(0, 500)
                else:
                    item["price"] = random.randint(300, 500)
            return item

# === —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î ===
def get_player(user_id, name):
    cursor.execute("SELECT * FROM players WHERE user_id=?", (user_id,))
    player = cursor.fetchone()
    if not player:
        cursor.execute("INSERT INTO players (user_id, name) VALUES (?, ?)", (user_id, name))
        conn.commit()
        return (user_id, name, 0, 0)
    else:
        cursor.execute("UPDATE players SET name=? WHERE user_id=?", (name, user_id))
        conn.commit()
        return player

def update_player(user_id, points=None, last_dep=None):
    if points is not None and last_dep is not None:
        cursor.execute("UPDATE players SET points=?, last_dep=? WHERE user_id=?", (points, last_dep, user_id))
    elif points is not None:
        cursor.execute("UPDATE players SET points=? WHERE user_id=?", (points, user_id))
    elif last_dep is not None:
        cursor.execute("UPDATE players SET last_dep=? WHERE user_id=?", (last_dep, user_id))
    conn.commit()

def register_chat(user_id, chat_id):
    cursor.execute("SELECT * FROM chats WHERE user_id=? AND chat_id=?", (user_id, chat_id))
    if not cursor.fetchone():
        cursor.execute("INSERT INTO chats (user_id, chat_id) VALUES (?, ?)", (user_id, chat_id))
        conn.commit()

# === –ö–æ–º–∞–Ω–¥–∞ /reset —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º ===
@bot.message_handler(commands=["reset"])
def reset_confirm(message):
    if message.chat.type == "private":
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_yes = types.InlineKeyboardButton(text="–î–∞", callback_data="reset_yes")
        btn_no = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="reset_no")
        markup.add(btn_yes, btn_no)

        bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–∞–Ω–∫—Ä–æ—Ç–∏—Ç—å—Å—è?",
            reply_markup=markup
        )
    else:
        bot.send_message(message.chat.id,"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("reset_"))
def reset_callback(call):
    if call.data == "reset_yes":
        cursor.execute("UPDATE players SET points=0 WHERE user_id=?", (call.from_user.id,))
        conn.commit()
        bot.answer_callback_query(call.id, "–í—ã –æ–±–∞–Ω–∫—Ä–æ—Ç–∏–ª–∏—Å—å üò¢")
        bot.send_message(call.message.chat.id, "–í–∞—à–∏ –æ—á–∫–∏ –æ–±–Ω—É–ª–µ–Ω—ã ‚úÖ")
    elif call.data == "reset_no":
        bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–∞")
        bot.send_message(call.message.chat.id, "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–±–Ω—É–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ ‚úÖ")

# === –ö–æ–º–∞–Ω–¥—ã –∏–≥—Ä—ã ===
@bot.message_handler(commands=["dep"])
def dep(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    name = message.from_user.first_name

    register_chat(user_id, chat_id)
    player = get_player(user_id, name)
    points = player[2]
    last_dep = player[3]
    current_time = int(time.time())

    if current_time - last_dep >= 8*3600:
        item = roll_item()
        new_points = points + item["price"]
        update_player(user_id, new_points, current_time)
        bot.reply_to(message,
            f"{name}, —Ç—ã {item['emoji']}{item['price']}‚Ç¨!\n"
            f"–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {new_points}‚Ç¨!"
        )
    else:
        remaining = 8*3600 - (current_time - last_dep)
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        bot.reply_to(message, f"{name}, –∂–¥–∏ –µ—â—ë {hours} —á {minutes} –º–∏–Ω.")

@bot.message_handler(commands=["stats"])
def stats(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    name = message.from_user.first_name

    register_chat(user_id, chat_id)
    player = get_player(user_id, name)
    points = player[2]
    last_dep = player[3]
    current_time = int(time.time())

    if current_time - last_dep >= 8*3600:
        wait = "–ú–æ–∂–Ω–æ –¥–µ–ø–∞—Ç—å!"
    else:
        remaining = 8*3600 - (current_time - last_dep)
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        wait = f"–ñ–¥–∞—Ç—å –µ—â—ë {hours} —á {minutes} –º–∏–Ω"

    bot.reply_to(message, f"{name}, —Ç–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª: {points}\n{wait}")

@bot.message_handler(commands=["topchat"])
def top_chat(message):
    chat_id = message.chat.id
    cursor.execute("""
        SELECT p.name, p.points
        FROM players p
        JOIN chats c ON p.user_id = c.user_id
        WHERE c.chat_id=?
        ORDER BY p.points DESC LIMIT 10
    """, (chat_id,))
    leaders = cursor.fetchall()
    text = "üèÜ –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤ —á–∞—Ç–∞:\n"
    for i, (name, points) in enumerate(leaders, start=1):
        text += f"{i}. {name} ‚Äî {points} ‚Ç¨!\n"
    bot.reply_to(message, text)

@bot.message_handler(commands=["topworld"])
def top_world(message):
    cursor.execute("""
        SELECT name, points
        FROM players
        ORDER BY points DESC LIMIT 10
    """)
    leaders = cursor.fetchall()
    text = "üåç –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤ –º–∏—Ä–∞:\n"
    for i, (name, points) in enumerate(leaders, start=1):
        text += f"{i}. {name} ‚Äî {points} ‚Ç¨!\n"
    bot.reply_to(message, text)

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup()
    btn0 = types.InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª/—á–∞—Ç!",
        url="https://t.me/ArgusM_bot?startgroup=true"
    )
    btn1 = types.InlineKeyboardButton("–ê–¥–º–∏–Ω–∫–∞üëë", callback_data="–∞–¥–º–∏–Ω–∫–∞")
    btn2 = types.InlineKeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—åüé≠", callback_data="–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
    markup.add(btn0, btn1, btn2)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("start_"))
    def reset_callback(call):
        if call.data == "–∞–¥–º–∏–Ω–∫–∞":
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        elif call.data == "–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
            bot.send_message(message.chat.id, "–î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –≤–≤–µ–¥–∏ !! –ø–µ—Ä–µ–¥ —Å–≤–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!")

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
def extract_relevant_entities(message):
    if not message.entities or not message.text:
        return []

    relevant_types = {'url', 'email', 'phone_number'}
    extracted = []

    for entity in message.entities:
        if entity.type in relevant_types:
            start = entity.offset
            end = start + entity.length
            entity_text = message.text[start:end]
            extracted.append(f"{entity.type}: {html.escape(entity_text)}")

    return extracted

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda m: True)
def handle_all_messages(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π
    relevant_entities = extract_relevant_entities(message)
    time_str = datetime.fromtimestamp(message.date).strftime("%d.%m.%Y %H:%M:%S")

    # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    lines = []
    lines.append("<b>–õ–ò–ß–ù–û–°–¢–¨</b>")
    if message.from_user.first_name:
        lines.append(f"–ò–º—è: {html.escape(message.from_user.first_name)}")
    if message.from_user.last_name:
        lines.append(f"–§–∞–º–∏–ª–∏—è: {html.escape(message.from_user.last_name)}")
    if message.from_user.username:
        lines.append(f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{html.escape(message.from_user.username)}")
    lines.append(f"ID: {message.from_user.id}")
    lines.append(f"–ë–æ—Ç: {message.from_user.is_bot}")
    if message.from_user.language_code:
        lines.append(f"–Ø–∑—ã–∫: {html.escape(message.from_user.language_code)}")
    lines.append(f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {time_str}\n")

    lines.append("<b>–ß–ê–¢</b>")
    lines.append(f"ID –ß–∞—Ç–∞: {message.chat.id}")
    lines.append(f"–¢–∏–ø —á–∞—Ç–∞: {message.chat.type}")
    if message.chat.title:
        lines.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞: {html.escape(message.chat.title)}")
    if message.chat.username:
        lines.append(f"–Æ–∑–µ—Ä–Ω–µ–π–º —á–∞—Ç–∞: @{html.escape(message.chat.username)}")

    # –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
    if message.new_chat_members:
        members = ', '.join(
            html.escape(u.first_name or '') for u in message.new_chat_members
        )
        lines.append(f"–ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {members}")

    # –í–∞–∂–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
    if relevant_entities:
        lines.append("\n<b>–°—É—â–Ω–æ—Å—Ç–∏:</b>")
        lines.extend(relevant_entities)

    # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    base_info = "\n".join(lines)
    if len(base_info) > 4000:
        base_info = base_info[:3990] + "\n<i>–û–±—Ä–µ–∑–∞–Ω–æ...</i>"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–¥–µ—é (!!)
    if message.text and message.text.startswith("!!"):
        bot.send_message(message.chat.id, "<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–¥–µ—é!</b>")
        idea_text = f"\n<b>–ò–î–ï–Ø:</b> {html.escape(message.text[2:].strip())}"
        bot.send_message(me, base_info + "\n\n" + idea_text)
        bot.send_message(message.chat.id, "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ, —Å–ø–∞—Å–∏–±–æ!")
    elif re.search(r'!!+', message.text):
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ü–æ—Å—Ç–∞–≤—å—Ç–µ !! –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —á—Ç–æ –±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏!")
        bot.send_message(me, base_info)
    else:
        bot.send_message(me, base_info)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()


