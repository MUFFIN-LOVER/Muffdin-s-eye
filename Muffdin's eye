import telebot
import threading
from telebot import types
import sqlite3
from flask import Flask, request
from phonenumbers import geocoder as ph_geocoder, carrier as ph_carrier, timezone as ph_timezone
from datetime import datetime
from zoneinfo import ZoneInfo
from telebot import apihelper
import phonenumbers
import json
import random
import io
import re
import time
import requests

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ===
TOKEN = ""
ADMIN_ID = 
PASSWORD = 1213

bot = telebot.TeleBot(TOKEN, parse_mode='HTML')
bot.remove_webhook()

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===
conn = sqlite3.connect("game.db", check_same_thread=False)
cursor = conn.cursor()

def normalize_phone(phone_str, default_region="DE"):
    try:
        num = phonenumbers.parse(phone_str, default_region)
        if phonenumbers.is_possible_number(num) and phonenumbers.is_valid_number(num):
            return phonenumbers.format_number(num, phonenumbers.PhoneNumberFormat.E164)
        else:
            return None
    except phonenumbers.NumberParseException:
        return None

def check_password(message):
    user_id = message.from_user.id
    password = message.text.strip()

    if password == str(PASSWORD):
        with conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO search_limits (user_id, searches, unlimited)
                VALUES (?, 0, 1) 
                ON CONFLICT(user_id) DO UPDATE SET unlimited=1
            """, (user_id,))
        bot.reply_to(message, "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã.")
    else:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")

# === –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü ===

cursor.execute("""
CREATE TABLE IF NOT EXISTS pending_payments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    order_id TEXT,
    invoice_url TEXT,
    tariff TEXT,
    status TEXT DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")
conn.commit()

cursor.execute("""
CREATE TABLE IF NOT EXISTS search_limits (
    user_id INTEGER PRIMARY KEY,
    searches INTEGER DEFAULT 0,
    unlimited INTEGER DEFAULT 0
)
""")
conn.commit()

cursor.execute("""
CREATE TABLE IF NOT EXISTS user_entities (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    entity_type TEXT,
    entity_value TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS players (
    user_id INTEGER PRIMARY KEY,
    name TEXT,
    points INTEGER DEFAULT 0,
    last_dep INTEGER DEFAULT 0,
    got_muffdin INTEGER DEFAULT 0
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS chat_info (
    chat_id INTEGER,
    user_id INTEGER,
    title TEXT,
    username TEXT,
    type TEXT,
    PRIMARY KEY(chat_id, user_id)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS user_info (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    is_bot INTEGER,
    phone_number TEXT,
    language_code TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS username_history (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    old_username TEXT,
    new_username TEXT,
    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")

conn.commit()

# === –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã ===
items = [
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üí¥ ", "price": 5, "chance": 30},
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üíµ ", "price": 10, "chance": 25},
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üí∂ ", "price": 20, "chance": 20},
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üí∑ ", "price": 30, "chance": 15},
    {"emoji": "–Ω–∞—à—ë–ª üí∞ ", "price": 50, "chance": 10},
    {"emoji": "–Ω–∞—à—ë–ª üíé ", "price": 100, "chance": 5},
    {"emoji": "–æ–≥—Ä–∞–±–∏–ª –±–∞–Ω–∫ üè¶ ", "price": 200, "chance": 3},
    {"emoji": "–Ω–∞—à—ë–ª üí≥ ", "price": random.randint(0, 500), "chance": 5},
    {"emoji": "–Ω–∞—à—ë–ª üìÄ —Å –±–∏—Ç–∫–æ–∏–Ω–∞–º–∏ ", "price": random.randint(300, 500), "chance": 2},
    {"emoji": "–ø—Ä–æ–ø–∏–ª üí∏ ", "price": -5, "chance": 15},
    {"emoji": "–¥–µ–ø–Ω—É–ª üí∏ ", "price": -10, "chance": 12},
    {"emoji": "–∑–∞–¥–æ–Ω–∞—Ç–∏–ª —Å—Ç—Ä–∏–º–µ—Ä—É üí∏ ", "price": -20, "chance": 10},
    {"emoji": "–≤—Å—Ç—Ä–µ—Ç–∏–ª Mr.Muffdinüëæ ", "price": 0.666, "chance": 1},
]

tariffs_amounts = {
    "tariff_money1": 5,
    "tariff_money2": 15,
    "tariff_money3": 40,
    "tariff_money4": 100,
    "tariff_money5": 300,
    "tariff_money6": 700
}

# === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î ===
def save_user_info(message, contact=None):
    user = message.from_user
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT phone_number, username FROM user_info WHERE user_id=?", (user.id,))
        row = cursor.fetchone()
        old_phone = row[0] if row else None
        old_username = row[1] if row else None

        if old_username and old_username != user.username:
            cursor.execute("""
                INSERT INTO username_history (user_id, old_username, new_username)
                VALUES (?, ?, ?)
            """, (user.id, old_username, user.username))

        new_phone = contact.phone_number if contact else old_phone

        cursor.execute("""
            INSERT INTO user_info (user_id, username, first_name, last_name, is_bot, phone_number, language_code)
            VALUES (?, ?, ?, ?, ?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET
                username=excluded.username,
                first_name=excluded.first_name,
                last_name=excluded.last_name,
                is_bot=excluded.is_bot,
                phone_number=excluded.phone_number,
                language_code=excluded.language_code
        """, (
            user.id, user.username, user.first_name, user.last_name,
            int(user.is_bot), new_phone, user.language_code
        ))

def get_whatsapp_link(phone):

    if not phone.startswith("+"):
        phone = "+" + phone
    # wa.me —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ '+', —Å–∫–æ–±–æ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    phone_digits = re.sub(r'\D', '', phone)
    return f"https://wa.me/{phone_digits}"

# ‚ö° –≠—Ñ—Ñ–µ–∫—Ç "–ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏"
def progress(chat_id, bot, title="–ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É..."):
    msg = bot.send_message(chat_id, f"{title} 0%")
    perc = 0
    while perc < 100:
        perc = min(100, perc + random.randint(5, 15))
        try:
            bot.edit_message_text(f"{title} {perc}%", chat_id, msg.message_id)
        except apihelper.ApiTelegramException:
            pass
        time.sleep(0.2)
    return msg  # –≤–µ—Ä–Ω—ë–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

def save_chat_info(message):
    chat = message.chat
    user = message.from_user
    with conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO chat_info (chat_id, user_id, title, username, type)
            VALUES (?, ?, ?, ?, ?)
            ON CONFLICT(chat_id, user_id) DO UPDATE SET
                title=excluded.title,
                username=excluded.username,
                type=excluded.type
        """, (
            chat.id,
            user.id,
            getattr(chat, "title", None),
            getattr(chat, "username", None),
            chat.type
        ))


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
def save_entities(message):
    if not message.text:
        return

    user_id = message.from_user.id
    entities_to_save = []

    # --- –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ message.entities ---
    if message.entities:
        relevant_types = {'url', 'email', 'phone_number'}
        for entity in message.entities:
            if entity.type in relevant_types:
                start = entity.offset
                end = start + entity.length
                value = message.text[start:end]
                entities_to_save.append((user_id, entity.type, value))

    # --- –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–∫–∏ ---
    urls = re.findall(r'(https?://\S+|www\.\S+)', message.text)
    emails = re.findall(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', message.text)
    phones = re.findall(r'\+?\d[\d\s-]{6,14}\d', message.text)

    for url in urls:
        entities_to_save.append((user_id, 'url', url))
    for email in emails:
        entities_to_save.append((user_id, 'email', email))
    for phone in phones:
        normalized_phone = normalize_phone(phone)
        if normalized_phone:  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
            entities_to_save.append((user_id, 'phone_number', normalized_phone))

    # --- –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã ---
    seen = set()
    unique_entities = []
    for e in entities_to_save:
        key = (e[1], e[2])  # (—Ç–∏–ø, –∑–Ω–∞—á–µ–Ω–∏–µ)
        if key not in seen:
            seen.add(key)
            unique_entities.append(e)

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î ---
    if unique_entities:
        with conn:
            cursor = conn.cursor()
            cursor.executemany(
                "INSERT INTO user_entities (user_id, entity_type, entity_value) VALUES (?, ?, ?)",
                unique_entities
            )

def log_user_info(message, contact=None):
    save_user_info(message, contact)
    save_chat_info(message)
    save_entities(message)  # <-- —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–Ω–æ—Å—Ç–∏


def roll_item(user_id, chat_id, bot, items):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –≤—Å—Ç—Ä–µ—á–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ Mr.Muffdin
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT got_muffdin FROM players WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        got_muffdin = row[0] if row else 0

    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    available_items = [item for item in items if not (item["emoji"] == "–≤—Å—Ç—Ä–µ—Ç–∏–ª Mr.Muffdinüëæ" and got_muffdin)]

    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ —à–∞–Ω—Å–∞–º
    r = random.randint(1, sum(item["chance"] for item in available_items))
    cumulative = 0
    for item in available_items:
        cumulative += item["chance"]
        if r <= cumulative:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            if item["emoji"] == "–Ω–∞—à—ë–ª üí≥":
                item["price"] = random.randint(0, 500)
            elif item["emoji"] == "–Ω–∞—à—ë–ª üìÄ —Å –±–∏—Ç–∫–æ–∏–Ω–∞–º–∏":
                item["price"] = random.randint(300, 500)
            elif item["emoji"] == "–≤—Å—Ç—Ä–µ—Ç–∏–ª Mr.Muffdinüëæ":
                with conn:
                    cursor.execute("UPDATE players SET got_muffdin = 1 WHERE user_id=?", (user_id,))
                    conn.commit()
            return item


def get_player(user_id, name):
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM players WHERE user_id=?", (user_id,))
        player = cursor.fetchone()
        if not player:
            cursor.execute("INSERT INTO players (user_id, name) VALUES (?, ?)", (user_id, name))
            cursor.execute("SELECT * FROM players WHERE user_id=?", (user_id,))
            return cursor.fetchone()
        else:
            cursor.execute("UPDATE players SET name=? WHERE user_id=?", (name, user_id))
            return player


def update_player(user_id, points=None, last_dep=None):
    with conn:
        cursor = conn.cursor()
        if points is not None and last_dep is not None:
            cursor.execute("UPDATE players SET points=?, last_dep=? WHERE user_id=?", (points, last_dep, user_id))
        elif points is not None:
            cursor.execute("UPDATE players SET points=? WHERE user_id=?", (points, user_id))
        elif last_dep is not None:
            cursor.execute("UPDATE players SET last_dep=? WHERE user_id=?", (last_dep, user_id))

@bot.message_handler(commands=['start'])
def start_command(message):
    if message.chat.type != "private":
        # –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        bot.reply_to(message, "‚ö† –ö–æ–º–∞–Ω–¥–∞ /start –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    log_user_info(message)
    send_main_menu(message.chat.id)


def send_main_menu(chat_id):
    inline_markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton("–ü–æ–∏—Å–∫ üîç", callback_data="adminka")
    btn2 = types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìÑ", callback_data="feedback")
    btn3 = types.InlineKeyboardButton("–ü—Ä–æ—á–µ–µ...", callback_data="other")
    inline_markup.add(btn1, btn2, btn3)

    photo_path = r"Photo/photo_2025-09-20_17-49-18.jpg"
    with open(photo_path, "rb") as photo_file:
        bot.send_photo(chat_id, photo=photo_file, reply_markup=inline_markup)


@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def handle_back(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    cursor.execute("SELECT phone_number FROM user_info WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    phone_saved = row and row[0]

    if not phone_saved:
        # –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn_contact = types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è üìû", request_contact=True)
        markup.add(btn_contact)
        bot.send_message(chat_id, "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å c –ø–æ–º–æ—â—å—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)
        return

    # –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å—Ç—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    send_main_menu(chat_id)

@bot.message_handler(func=lambda message: message.text and message.text.startswith("!!"))
def feedback_handler(message):
    feedback_text = message.text[2:].strip()
    bot.send_message(ADMIN_ID, f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.first_name} (@{message.from_user.username}):\n\n{feedback_text}")
    bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É ‚úÖ")

# === Callback-–º–µ–Ω—é ===
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    bot.answer_callback_query(call.id)

    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞
    cursor.execute("SELECT points FROM players WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    points = row["points"] if row else 0

    # === –ö–Ω–æ–ø–∫–∞ "–ü–æ–∏—Å–∫ / –ê–¥–º–∏–Ω–∫–∞" ===
    if call.data == "adminka":
        cursor.execute("SELECT phone_number FROM user_info WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        phone_saved = row and row["phone_number"]

        if not phone_saved:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è üìû", request_contact=True))
            bot.send_message(chat_id, "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)
        else:
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(
                types.InlineKeyboardButton("–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç", callback_data="search"),
                types.InlineKeyboardButton("–¢–∞—Ä–∏—Ñ—ã üíµ", callback_data="tariffs"),
                types.InlineKeyboardButton("–ò–Ω—Ñ–æ ‚ùï", callback_data="info"),
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            )
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)

    # === –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å / feedback ===
    elif call.data == "feedback":
        bot.send_message(chat_id, "...")

    # === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤ ===
    elif call.data == "tariffs":
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("$", callback_data="tariff_money"),
            types.InlineKeyboardButton("·õñ", callback_data="tariff_geme_maney"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        bot.send_message(chat_id, "üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–∞—Ä–∏—Ñ–æ–≤:", reply_markup=markup)

    # === –¢–∞—Ä–∏—Ñ—ã $ ===
    elif call.data == "tariff_money":
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("2 $ = 5 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_money1"),
            types.InlineKeyboardButton("5 $ = 15 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_money2"),
            types.InlineKeyboardButton("10 $ = 40 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_money3"),
            types.InlineKeyboardButton("20 $ = 100 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_money4"),
            types.InlineKeyboardButton("50 $ = 300 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_money5"),
            types.InlineKeyboardButton("100 $ = 700 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_money6")
        )
        markup.add(types.InlineKeyboardButton("PINüîê", callback_data="PIN"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        bot.send_message(chat_id, "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ $:", reply_markup=markup)

    # === –¢–∞—Ä–∏—Ñ—ã ·õñ ===
    elif call.data == "tariff_geme_maney":
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("1000 ·õñ = 1 –ó–∞–ø—Ä–æ—Å", callback_data="tariff_geme_maney1"),
            types.InlineKeyboardButton("5000 ·õñ = 7 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_geme_maney2"),
            types.InlineKeyboardButton("10000 ·õñ = 20 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_geme_maney3")
        )
        markup.add(types.InlineKeyboardButton("PINüîê", callback_data="PIN"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        bot.send_message(chat_id, "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ ·õñ:", reply_markup=markup)

    # === –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ ===
    elif call.data.startswith("tariff_money") or call.data.startswith("tariff_geme_maney"):
        tariffs = {
            "tariff_geme_maney1": (1000, 1),
            "tariff_geme_maney2": (5000, 7),
            "tariff_geme_maney3": (10000, 20),
            "tariff_money1": (2, 5),
            "tariff_money2": (5, 15),
            "tariff_money3": (10, 40),
            "tariff_money4": (20, 100),
            "tariff_money5": (50, 300),
            "tariff_money6": (100, 700)
        }

        cost, searches_add = tariffs[call.data]

        if points < cost:
            bot.send_message(chat_id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤! –ù—É–∂–Ω–æ {cost}·õñ, —É –≤–∞—Å {points}·õñ")
            return

        cursor.execute("UPDATE players SET points = points - ? WHERE user_id=?", (cost, user_id))

        cursor.execute("SELECT searches, unlimited FROM search_limits WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        if row:
            searches, unlimited = row["searches"], row["unlimited"]
            if not unlimited:
                cursor.execute("UPDATE search_limits SET searches = searches + ? WHERE user_id=?", (searches_add, user_id))
        else:
            cursor.execute("INSERT INTO search_limits (user_id, searches, unlimited) VALUES (?, ?, 0)", (user_id, searches_add))

        conn.commit()
        bot.send_message(chat_id, f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {searches_add} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")

    # === –ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ ===
    elif call.data == "search":
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –ë–î", callback_data="search_name"),
            types.InlineKeyboardButton("–°–Ω–æ—Å", callback_data="search_email"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        bot.send_message(chat_id, "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:", reply_markup=markup)

    elif call.data == "search_name":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID/USERNAME/PHONE NUMBER")

    # === –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ===
    elif call.data == "info":
        cursor.execute("SELECT searches, unlimited FROM search_limits WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        searches_text = "‚àû" if row and row["unlimited"] else str(row["searches"] if row else 0)
        bot.send_message(chat_id, f"‚Ñπ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {searches_text} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")

    # === –ü—Ä–æ—á–µ–µ ===
    elif call.data == "other":
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª/—á–∞—Ç!", url="https://t.me/ArgusM_bot?startgroup=true"),
            types.InlineKeyboardButton("–ö–∞–Ω–∞–ª Mr.MUFFDINüëæ", url="https://t.me/+wDw25hUBPd1mMGVi"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)

    # === –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è ===
    elif call.data == "PIN":
        msg = bot.send_message(chat_id, "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        bot.register_next_step_handler(msg, check_password)

    # === –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
    elif call.data == "back_to_main":
        send_main_menu(chat_id)

    # === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π ===
    elif call.data.startswith("entities_file_"):
        uid = call.data.split("_")[-1]
        file_name = f"entities_{uid}.txt"
        try:
            with open(file_name, "rb") as f:
                bot.send_document(chat_id, f)
        except FileNotFoundError:
            bot.send_message(chat_id, "–§–∞–π–ª —Å–æ —Å—É—â–Ω–æ—Å—Ç—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.message_handler(commands=['roll'])
def roll_cmd(message):
    user_id = message.from_user.id
    name = message.from_user.first_name
    item = roll_item(user_id, message.chat.id, bot, items)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ –¥—Ä–æ–ø
    if "price" in item:
        bot.send_message(message.chat.id, f"{name}, —Ç—ã {item['emoji']} –∏ –ø–æ–ª—É—á–∏–ª {item['price']}·õñ!")
    else:
        bot.send_message(message.chat.id, f"{name}, —Ç—ã {item['emoji']}!")


# === –ö–æ–Ω—Ç–∞–∫—Ç—ã ===
@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    if not message.contact or not message.contact.phone_number:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    phone = normalize_phone(message.contact.phone_number)
    if not phone:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    cursor.execute("""
        INSERT INTO user_info (user_id, phone_number)
        VALUES (?, ?)
        ON CONFLICT(user_id) DO UPDATE SET phone_number=excluded.phone_number
    """, (message.from_user.id, phone))
    conn.commit()

    bot.send_message(message.chat.id, "‚úÖ –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞")
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –º–µ–Ω—é –ø–æ–∏—Å–∫–∞
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –ë–î", callback_data="search_name"),
        types.InlineKeyboardButton("–°–Ω–æ—Å", callback_data="search_email"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    bot.send_message(message.chat.id, "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:", reply_markup=markup)



# === –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ===
@bot.message_handler(commands=["dep"])
def dep(message):
    user_id = message.from_user.id
    name = message.from_user.first_name
    current_time = int(time.time())

    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM players WHERE user_id=?", (user_id,))
        player = cursor.fetchone()

        if not player:
            cursor.execute(
                "INSERT INTO players (user_id, name, points, last_dep, got_muffdin) VALUES (?, ?, 0, 0, 0)",
                (user_id, name)
            )
            points, last_dep = 0, 0
        else:
            points, last_dep = player[2], player[3] or 0

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–ø–∞ (8 —á–∞—Å–æ–≤)
        if current_time - last_dep >= 8 * 3600:
            item = roll_item(user_id, message.chat.id, bot, items)

            new_points = points + item.get("price", 0)
            cursor.execute(
                "UPDATE players SET points=?, last_dep=? WHERE user_id=?",
                (new_points, current_time, user_id)
            )
            conn.commit()

            bot.send_message(message.chat.id, f"{name}, —Ç—ã {item['emoji']} –∏ –ø–æ–ª—É—á–∏–ª {item.get('price', 0)}·õñ!\nüí∞ –°–µ–π—á–∞—Å —É —Ç–µ–±—è: {new_points}·õñ")
        else:
            remaining = 8 * 3600 - (current_time - last_dep)
            hours = remaining // 3600
            minutes = (remaining % 3600) // 60
            bot.reply_to(message, f"{name}, –∂–¥–∏ –µ—â—ë {hours} —á {minutes} –º–∏–Ω.")

    log_user_info(message)

@bot.message_handler(commands=["stats"])
def stats(message):
    user_id = message.from_user.id
    name = message.from_user.first_name
    save_chat_info(message)

    player = get_player(user_id, name)
    points = player[2]
    last_dep = player[3]
    current_time = int(time.time())

    if current_time - last_dep >= 8 * 3600:
        wait = "–ú–æ–∂–Ω–æ –¥–µ–ø–∞—Ç—å!"
    else:
        remaining = 8 * 3600 - (current_time - last_dep)
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        wait = f"–ñ–¥–∞—Ç—å –µ—â—ë {hours} —á {minutes} –º–∏–Ω"

    bot.reply_to(message, f"{name}, —Ç–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª: {points}\n{wait}")
    log_user_info(message)

@bot.message_handler(commands=["topchat"])
def top_chat(message):
    chat_id = message.chat.id
    cursor.execute("""
    SELECT p.name, p.points FROM players p
    JOIN chat_info c ON p.user_id = c.user_id
    WHERE c.chat_id=?
    ORDER BY p.points DESC
    LIMIT 10
    """, (chat_id,))
    leaders = cursor.fetchall()
    text = "üèÜ –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤ —á–∞—Ç–∞:\n"
    for i, (name, points) in enumerate(leaders, start=1):
        text += f"{i}. {name} ‚Äî {points} ·õñ!\n"
    bot.reply_to(message, text)
    log_user_info(message)

@bot.message_handler(commands=["topworld"])
def top_world(message):
    cursor.execute("SELECT name, points FROM players ORDER BY points DESC LIMIT 10")
    leaders = cursor.fetchall()
    text = "üåç –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤ –º–∏—Ä–∞:\n"
    for i, (name, points) in enumerate(leaders, start=1):
        text += f"{i}. {name} ‚Äî {points} ·õñ!\n"
    bot.reply_to(message, text)
    log_user_info(message)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤ ===
# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É –ª–∏–º–∏—Ç–æ–≤
def ensure_search_limit(user_id):
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT searches, unlimited FROM search_limits WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        if not row:
            cursor.execute("SELECT phone_number FROM user_info WHERE user_id=?", (user_id,))
            user_row = cursor.fetchone()
            phone = user_row[0] if user_row else None

            if phone:
                unlimited = 1
                searches = 0
            else:
                unlimited = 0
                searches = 5

            cursor.execute(
                "INSERT INTO search_limits (user_id, searches, unlimited) VALUES (?, ?, ?)",
                (user_id, searches, unlimited)
            )


def analyze_phone_full(phone_str):
    result = {
        "raw_input": phone_str,
        "parsed": None,
        "valid": False,
        "possible": False,
        "e164": None,
        "international": None,
        "national": None,
        "rfc3966": None,
        "country_code": None,
        "region_code": None,
        "region_description": None,
        "carrier": None,
        "number_type": None,
        "type_name": None,
        "timezones": [],
        "utc_offsets": [],
        "example_number": None,
        "example_mobile": None,
        "example_fixed": None
    }

    phone_str = phone_str.strip()
    default_region = None

    if phone_str.startswith("0"):
        default_region = "DE"  # –ì–µ—Ä–º–∞–Ω–∏—è
        phone_str = "+49" + phone_str[1:]
    elif not phone_str.startswith("+"):
        phone_str = "+" + phone_str

    try:
        num = phonenumbers.parse(phone_str, default_region)
        result["parsed"] = str(num)
    except phonenumbers.NumberParseException as e:
        result["error"] = f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}"
        return result

    result["possible"] = phonenumbers.is_possible_number(num)
    result["valid"] = phonenumbers.is_valid_number(num)

    try:
        result["e164"] = phonenumbers.format_number(num, phonenumbers.PhoneNumberFormat.E164)
        result["international"] = phonenumbers.format_number(num, phonenumbers.PhoneNumberFormat.INTERNATIONAL)
        result["national"] = phonenumbers.format_number(num, phonenumbers.PhoneNumberFormat.NATIONAL)
        result["rfc3966"] = phonenumbers.format_number(num, phonenumbers.PhoneNumberFormat.RFC3966)
    except Exception:
        pass

    result["country_code"] = num.country_code
    result["region_code"] = phonenumbers.region_code_for_number(num)
    try:
        result["region_description"] = ph_geocoder.description_for_number(num, "ru")
    except Exception:
        pass

    try:
        result["carrier"] = ph_carrier.name_for_number(num, "ru")
    except Exception:
        pass

    try:
        num_type = phonenumbers.number_type(num)
        result["number_type"] = num_type
        result["type_name"] = phonenumbers.NumberType._VALUES_TO_NAMES.get(num_type, "UNKNOWN")
    except Exception:
        pass

    try:
        tzs = ph_timezone.time_zones_for_number(num)
        result["timezones"] = list(tzs)
        offsets = []
        for tz in tzs:
            try:
                tzobj = ZoneInfo(tz)
                now = datetime.now(tzobj)
                offset = now.utcoffset()
                if offset is not None:
                    total_minutes = offset.total_seconds() // 60
                    hours, minutes = divmod(abs(int(total_minutes)), 60)
                    sign = "+" if total_minutes >= 0 else "-"
                    offsets.append(f"{sign}{hours:02d}:{minutes:02d}")
            except Exception:
                offsets.append("unknown")
        result["utc_offsets"] = offsets
    except Exception:
        pass

    return result


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    text = message.text.strip() if message.text else ""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç –≤—Å–µ–≥–¥–∞
    log_user_info(message)

    # === –û–±—â–∏–µ —á–∞—Ç—ã ===
    if message.chat.type != "private":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        if text.startswith("/roll"):
            roll_cmd(message)
        elif text.startswith("/dep"):
            dep(message)
        elif text.startswith("/stats"):
            stats(message)
        elif text.startswith("/topchat"):
            top_chat(message)
        elif text.startswith("/topworld"):
            top_world(message)
        # –û—Å—Ç–∞–ª—å–Ω–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return

    # === –õ–∏—á–Ω—ã–µ —á–∞—Ç—ã ===
    if message.chat.type == "private":
        process_search(message, text)


def process_search(message, query):
    if not query:
        return

    chat_id = message.chat.id
    user_id = message.from_user.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞
    field = value = None
    if query.startswith("@"):
        field = "username"
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π username –¥–æ –ø—Ä–æ–±–µ–ª–∞ –∏–ª–∏ –≤—Ç–æ—Ä–æ–≥–æ @
        value = query[1:].split()[0].split("@")[0].lower()
    elif query.isdigit() and len(query) <= 10:
        field = "user_id"
        value = int(query)
    elif re.fullmatch(r"\+?\d[\d\s-]{6,14}\d", query):
        field = "phone_number"
        value = normalize_phone(query)
        if not value:
            bot.reply_to(message, "‚ö† –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.")
            return
    else:
        bot.reply_to(message, "‚ö† –í–≤–µ–¥–∏—Ç–µ @username, ID –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    conn.row_factory = sqlite3.Row
    cur = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    cur.execute("SELECT searches, unlimited FROM search_limits WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    searches, unlimited = (row["searches"], row["unlimited"]) if row else (0, 0)
    if not unlimited and searches <= 0:
        bot.reply_to(message, "‚ö† –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã!")
        return

    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    if field == "username":
        cur.execute("SELECT * FROM user_info WHERE LOWER(username)=?", (value,))
    elif field == "phone_number":
        cur.execute("SELECT * FROM user_info WHERE phone_number=?", (value,))
    else:
        cur.execute("SELECT * FROM user_info WHERE user_id=?", (value,))
    user = cur.fetchone()

    if not user:
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å {field}={query} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # --- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ---
    uid = user["user_id"]
    uname = user["username"] or "‚Äî"
    fname = user["first_name"] or "‚Äî"
    lname = user["last_name"] or "‚Äî"
    phone = normalize_phone(user["phone_number"]) if user["phone_number"] else "‚Äî"
    lang = user["language_code"] or "‚Äî"

    # --- –ò—Å—Ç–æ—Ä–∏—è username ---
    cur.execute(
        "SELECT old_username, new_username, changed_at FROM username_history WHERE user_id=? ORDER BY changed_at DESC",
        (uid,)
    )
    history = cur.fetchall()
    history_text = "\n".join([f"{h['old_username']} ‚Üí {h['new_username']} ({h['changed_at']})" for h in history]) or "‚Äî"

    # --- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    cur.execute("SELECT COUNT(*) as cnt FROM chat_info WHERE user_id=?", (uid,))
    row = cur.fetchone()
    chats_count = row["cnt"] if row else "‚Äî"

    # --- –°—É—â–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    cur.execute(
        "SELECT entity_type, entity_value, created_at FROM user_entities WHERE user_id=? ORDER BY created_at DESC",
        (uid,)
    )
    entities = cur.fetchall()
    entities_text = "‚Äî"
    full_entities_text = None

    if entities:
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        last_10 = entities[:10]
        entities_text = "\n".join([f"{e['entity_type']}: {e['entity_value']} ({e['created_at']})" for e in last_10])
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 10 ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª
        if len(entities) > 10:
            full_entities_text = "\n".join([f"{e['entity_type']}: {e['entity_value']} ({e['created_at']})" for e in entities])

    # --- –ê–Ω–∞–ª–∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ phonenumbers ---
    if phone != "‚Äî":
        analysis = analyze_phone_full(phone)
        phone_formatted = analysis.get("e164") or phone
        region_code = analysis.get("region_code") or "‚Äî"
        country_code = analysis.get("country_code") or "‚Äî"
        region_desc = analysis.get("region_description") or "‚Äî"
        carrier_name = analysis.get("carrier") or "‚Äî"
        tzs_str = ", ".join(analysis.get("timezones", [])) or "‚Äî"
        utc_str = ", ".join(analysis.get("utc_offsets", [])) or "‚Äî"
    else:
        phone_formatted = region_code = country_code = region_desc = carrier_name = tzs_str = utc_str = "‚Äî"

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ---
    reply = f"""
<b>‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>
<b>ID:</b> <code>{uid}</code>
<b>Username:</b> @{uname}
<b>–ò–º—è:</b> {fname}
<b>–§–∞–º–∏–ª–∏—è:</b> {lname}
<b>–Ø–∑—ã–∫:</b> {lang}
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –æ—Ç:</b> {chats_count}

<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω</b>
<b>–ù–æ–º–µ—Ä:</b> <code>{phone_formatted}</code>
<b>–°—Ç—Ä–∞–Ω–∞ / —Ä–µ–≥–∏–æ–Ω:</b> {region_code} 
<b>–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã:</b> +{country_code}
<b>–†–µ–≥–∏–æ–Ω:</b> {region_desc}
<b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> {carrier_name}
<b>–¢–∞–π–º–∑–æ–Ω–∞:</b> {tzs_str}
<b>UTC —Å–º–µ—â–µ–Ω–∏—è:</b> {utc_str}

<b>üìú –ò—Å—Ç–æ—Ä–∏—è username:</b>
<pre>{history_text}</pre>
<b>üóÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>
<pre>{entities_text}</pre>
""".strip()

    markup = types.InlineKeyboardMarkup(row_width=1)
    if phone != "‚Äî":
        wa_link = get_whatsapp_link(phone)
        markup.add(types.InlineKeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å WhatsApp", url=wa_link))
    if uname != "‚Äî":
        tg_link = f"https://t.me/{uname}"
        markup.add(types.InlineKeyboardButton("üí¨ –û—Ç–∫—Ä—ã—Ç—å Telegram", url=tg_link))

    bot.send_message(chat_id, reply, reply_markup=markup)

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å–æ –≤—Å–µ–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏ ---
    if full_entities_text:
        file_bytes = io.BytesIO(full_entities_text.encode('utf-8'))
        file_bytes.name = f"entities_{uid}.txt"
        file_bytes.seek(0)
        bot.send_document(chat_id, file_bytes, caption="–í—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    # --- –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ---
    if not unlimited and searches > 0:
        cur.execute("UPDATE search_limits SET searches = searches - 1 WHERE user_id=?", (user_id,))
        conn.commit()


def process_game_command(message, text):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –æ–±—â–∏—Ö —á–∞—Ç–∞—Ö
    """
    if not text:
        return

    # –¢—É—Ç –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–º–∞–Ω–¥—ã —Ç–∏–ø–∞ /start_game, /join, /score –∏ —Ç.–¥.
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    if text.startswith("/start_game"):
        start_game(message)
    elif text.startswith("/join"):
        join_game(message)
    elif text.startswith("/score"):
        show_score(message)

    # –í–°–ï–ì–î–ê —Å–æ—Ö—Ä–∞–Ω—è–µ–º info –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Å—É—â–Ω–æ—Å—Ç–∏
    log_user_info(message)
    save_entities(message)



# –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("entities_file_"))
def send_entities_file(call):
    uid = call.data.split("_")[-1]
    file_name = f"entities_{uid}.txt"
    try:
        with open(file_name, "rb") as f:
            bot.send_document(call.message.chat.id, f)
    except FileNotFoundError:
        bot.send_message(call.message.chat.id, "–§–∞–π–ª —Å–æ —Å—É—â–Ω–æ—Å—Ç—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
bot.infinity_polling()
