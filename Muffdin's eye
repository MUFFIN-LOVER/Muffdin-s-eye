import telebot
import threading
from telebot import types
import sqlite3
from flask import Flask, request
from phonenumbers import geocoder as ph_geocoder, carrier as ph_carrier, timezone as ph_timezone
from datetime import datetime
from telebot.types import LabeledPrice, PreCheckoutQuery
from zoneinfo import ZoneInfo
from telebot import apihelper
import phonenumbers
import json
import random
import io
import re
import time
import requests

TOKEN = "8212352418:AAGPJ1Ng0v8AD1sYhdRrD6rCX2rtr7LOVeI"
provider_token = "2051251535:TEST:OTk5MDA4ODgxLTAwNQ"
ADMIN_ID = 8295751364

bot = telebot.TeleBot(TOKEN, parse_mode='HTML')
bot.remove_webhook()

conn = sqlite3.connect("INFO.db", check_same_thread=False)
cursor = conn.cursor()

def normalize_phone(phone_str):
    phone_str = phone_str.strip()
    try:
        if not phone_str.startswith("+"):
            phone_str = "+" + re.sub(r"\D", "", phone_str)
        num = phonenumbers.parse(phone_str, None)
        if phonenumbers.is_possible_number(num) and phonenumbers.is_valid_number(num):
            return phonenumbers.format_number(num, phonenumbers.PhoneNumberFormat.E164)
        else:
            return None
    except phonenumbers.NumberParseException:
        return None

def check_password(message):
    user_id = message.from_user.id
    password = message.text.strip()

cursor.execute("""
               CREATE TABLE IF NOT EXISTS pending_payments
               (
                   id
                   INTEGER
                   PRIMARY
                   KEY
                   AUTOINCREMENT,
                   user_id
                   INTEGER,
                   order_id
                   TEXT,
                   invoice_url
                   TEXT,
                   tariff
                   TEXT,
                   status
                   TEXT
                   DEFAULT
                   'pending',
                   created_at
                   TIMESTAMP
                   DEFAULT
                   CURRENT_TIMESTAMP
               )
               """)
conn.commit()

cursor.execute("""
               CREATE TABLE IF NOT EXISTS search_limits
               (
                   user_id
                   INTEGER
                   PRIMARY
                   KEY,
                   searches
                   INTEGER
                   DEFAULT
                   0
               )
               """)
conn.commit()

cursor.execute("""
               CREATE TABLE IF NOT EXISTS user_entities
               (
                   id
                   INTEGER
                   PRIMARY
                   KEY
                   AUTOINCREMENT,
                   user_id
                   INTEGER,
                   entity_type
                   TEXT,
                   entity_value
                   TEXT,
                   created_at
                   TIMESTAMP
                   DEFAULT
                   CURRENT_TIMESTAMP
               )
               """)

cursor.execute("""
               CREATE TABLE IF NOT EXISTS players
               (
                   user_id
                   INTEGER
                   PRIMARY
                   KEY,
                   name
                   TEXT,
                   points
                   INTEGER
                   DEFAULT
                   0,
                   last_dep
                   INTEGER
                   DEFAULT
                   0,
                   got_muffdin
                   INTEGER
                   DEFAULT
                   0
               )
               """)

cursor.execute("""
               CREATE TABLE IF NOT EXISTS chat_info
               (
                   chat_id
                   INTEGER,
                   user_id
                   INTEGER,
                   title
                   TEXT,
                   username
                   TEXT,
                   type
                   TEXT,
                   PRIMARY
                   KEY
               (
                   chat_id,
                   user_id
               )
                   )
               """)

cursor.execute("""
               CREATE TABLE IF NOT EXISTS user_info
               (
                   user_id
                   INTEGER
                   PRIMARY
                   KEY,
                   username
                   TEXT,
                   first_name
                   TEXT,
                   last_name
                   TEXT,
                   is_bot
                   INTEGER,
                   phone_number
                   TEXT,
                   language_code
                   TEXT
               )
               """)

cursor.execute("""
               CREATE TABLE IF NOT EXISTS username_history
               (
                   id
                   INTEGER
                   PRIMARY
                   KEY
                   AUTOINCREMENT,
                   user_id
                   INTEGER,
                   old_username
                   TEXT,
                   new_username
                   TEXT,
                   changed_at
                   TIMESTAMP
                   DEFAULT
                   CURRENT_TIMESTAMP
               )
               """)

conn.commit()

items = [
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üí¥ ", "price": 5, "chance": 30},
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üíµ ", "price": 10, "chance": 25},
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üí∂ ", "price": 20, "chance": 20},
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üí∑ ", "price": 30, "chance": 15},
    {"emoji": "–Ω–∞—à—ë–ª üí∞ ", "price": 50, "chance": 10},
    {"emoji": "–Ω–∞—à—ë–ª üíé ", "price": 100, "chance": 5},
    {"emoji": "–æ–≥—Ä–∞–±–∏–ª –±–∞–Ω–∫ üè¶ ", "price": 200, "chance": 3},
    {"emoji": "–Ω–∞—à—ë–ª üí≥ ", "price": random.randint(0, 500), "chance": 5},
    {"emoji": "–Ω–∞—à—ë–ª üìÄ —Å –±–∏—Ç–∫–æ–∏–Ω–∞–º–∏ ", "price": random.randint(300, 500), "chance": 2},
    {"emoji": "–ø—Ä–æ–ø–∏–ª üí∏ ", "price": -5, "chance": 15},
    {"emoji": "–¥–µ–ø–Ω—É–ª üí∏ ", "price": -10, "chance": 12},
    {"emoji": "–∑–∞–¥–æ–Ω–∞—Ç–∏–ª —Å—Ç—Ä–∏–º–µ—Ä—É üí∏ ", "price": -20, "chance": 10},
    {"emoji": "–≤—Å—Ç—Ä–µ—Ç–∏–ª Mr.Muffdinüëæ ", "price": 0.666, "chance": 1},
]

tariffs_amounts = {
    "tariff_money1": 5,
    "tariff_money2": 15,
    "tariff_money3": 40,
    "tariff_money4": 100,
    "tariff_money5": 300,
    "tariff_money6": 700
}

STARS_TARIFFS = {
    "tariff_stars1": {"stars": 150, "searches": 5},
    "tariff_stars2": {"stars": 250, "searches": 15},
    "tariff_stars3": {"stars": 500, "searches": 40},
    "tariff_stars4": {"stars": 750, "searches": 75},
    "tariff_stars5": {"stars": 1000, "searches": 100},
    "tariff_stars6": {"stars": 2500, "searches": 300},
}

def give_searches(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
        return

    text = message.text.strip()
    text = re.sub(r'^/give\s*', '', text)  # —É–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /give

    match = re.match(r"(?:@?(\w+)\s*)?\+(\d+)", text)
    if not match:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ username +—á–∏—Å–ª–æ –∏–ª–∏ +—á–∏—Å–ª–æ")
        return

    username = match.group(1)  # –º–æ–∂–µ—Ç –±—ã—Ç—å None
    amount = int(match.group(2))

    if username:
        cursor.execute("SELECT user_id FROM user_info WHERE LOWER(username)=?", (username.lower(),))
        row = cursor.fetchone()
        if not row:
            bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        user_id = row[0]
    else:
        user_id = message.from_user.id

    cursor.execute("SELECT searches FROM search_limits WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    if row:
        new_searches = row[0] + amount
        cursor.execute("UPDATE search_limits SET searches=? WHERE user_id=?", (new_searches, user_id))
    else:
        new_searches = amount
        cursor.execute("INSERT INTO search_limits (user_id, searches) VALUES (?, ?)", (user_id, new_searches))

    conn.commit()
    bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –°–µ–π—á–∞—Å —É –Ω–µ–≥–æ: {new_searches} –∑–∞–ø—Ä–æ—Å–æ–≤.")

def save_user_info(message, contact=None):
    user = message.from_user
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT phone_number, username FROM user_info WHERE user_id=?", (user.id,))
        row = cursor.fetchone()
        old_phone = row[0] if row else None
        old_username = row[1] if row else None

        if old_username and old_username != user.username:
            cursor.execute("""
                           INSERT INTO username_history (user_id, old_username, new_username)
                           VALUES (?, ?, ?)
                           """, (user.id, old_username, user.username))

        new_phone = contact.phone_number if contact else old_phone

        cursor.execute("""
                       INSERT INTO user_info (user_id, username, first_name, last_name, is_bot, phone_number,
                                              language_code)
                       VALUES (?, ?, ?, ?, ?, ?, ?) ON CONFLICT(user_id) DO
                       UPDATE SET
                           username=excluded.username,
                           first_name=excluded.first_name,
                           last_name=excluded.last_name,
                           is_bot=excluded.is_bot,
                           phone_number=excluded.phone_number,
                           language_code=excluded.language_code
                       """, (
                           user.id, user.username, user.first_name, user.last_name,
                           int(user.is_bot), new_phone, user.language_code
                       ))

def get_whatsapp_link(phone):
    if not phone.startswith("+"):
        phone = "+" + phone
    phone_digits = re.sub(r'\D', '', phone)
    return f"https://wa.me/{phone_digits}"

def save_chat_info(message):
    chat = message.chat
    user = message.from_user
    with conn:  # <- –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO chat_info (chat_id, user_id, title, username, type)
            VALUES (?, ?, ?, ?, ?)
            ON CONFLICT(chat_id, user_id) DO UPDATE SET
                title=excluded.title,
                username=excluded.username,
                type=excluded.type
        """, (
            int(chat.id),
            int(user.id),
            str(getattr(chat, "title", None)),
            str(getattr(chat, "username", None)),
            str(chat.type)
        ))

def save_entities(message):
    if not message.text:
        return

    user_id = message.from_user.id
    entities_to_save = []

    if message.entities:
        relevant_types = {'url', 'email', 'phone_number'}
        for entity in message.entities:
            if entity.type in relevant_types:
                start = entity.offset
                end = start + entity.length
                value = message.text[start:end]
                entities_to_save.append((user_id, entity.type, value))

    urls = re.findall(r'(https?://\S+|www\.\S+)', message.text)
    emails = re.findall(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', message.text)
    phones = re.findall(r'\+?\d[\d\s-]{6,14}\d', message.text)

    for url in urls:
        entities_to_save.append((user_id, 'url', url))
    for email in emails:
        entities_to_save.append((user_id, 'email', email))
    for phone in phones:
        normalized_phone = normalize_phone(phone)
        if normalized_phone:
            entities_to_save.append((user_id, 'phone_number', normalized_phone))

    seen = set()
    unique_entities = []
    for e in entities_to_save:
        key = (e[1], e[2])
        if key not in seen:
            seen.add(key)
            unique_entities.append(e)

    if unique_entities:
        with conn:
            cursor = conn.cursor()
            cursor.executemany(
                "INSERT INTO user_entities (user_id, entity_type, entity_value) VALUES (?, ?, ?)",
                unique_entities
            )

@bot.message_handler(commands=['give'])
def handle_give(message):
    give_searches(message)

def log_user_info(message, contact=None):
    save_user_info(message, contact)
    save_chat_info(message)
    save_entities(message)

def roll_item(user_id, chat_id, bot, items):
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT got_muffdin FROM players WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        got_muffdin = row[0] if row else 0

    available_items = [item for item in items if not (item["emoji"] == "–≤—Å—Ç—Ä–µ—Ç–∏–ª Mr.Muffdinüëæ" and got_muffdin)]

    r = random.randint(1, sum(item["chance"] for item in available_items))
    cumulative = 0
    for item in available_items:
        cumulative += item["chance"]
        if r <= cumulative:
            if item["emoji"] == "–Ω–∞—à—ë–ª üí≥":
                item["price"] = random.randint(0, 500)
            elif item["emoji"] == "–Ω–∞—à—ë–ª üìÄ —Å –±–∏—Ç–∫–æ–∏–Ω–∞–º–∏":
                item["price"] = random.randint(300, 500)
            elif item["emoji"] == "–≤—Å—Ç—Ä–µ—Ç–∏–ª Mr.Muffdinüëæ":
                with conn:
                    cursor.execute("UPDATE players SET got_muffdin = 1 WHERE user_id=?", (user_id,))
                    conn.commit()
            return item

def get_player(user_id, name):
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM players WHERE user_id=?", (user_id,))
        player = cursor.fetchone()
        if not player:
            cursor.execute("INSERT INTO players (user_id, name) VALUES (?, ?)", (user_id, name))
            cursor.execute("SELECT * FROM players WHERE user_id=?", (user_id,))
            return cursor.fetchone()
        else:
            cursor.execute("UPDATE players SET name=? WHERE user_id=?", (name, user_id))
            return player

def update_player(user_id, points=None, last_dep=None):
    with conn:
        cursor = conn.cursor()
        if points is not None and last_dep is not None:
            cursor.execute("UPDATE players SET points=?, last_dep=? WHERE user_id=?", (points, last_dep, user_id))
        elif points is not None:
            cursor.execute("UPDATE players SET points=? WHERE user_id=?", (points, user_id))
        elif last_dep is not None:
            cursor.execute("UPDATE players SET last_dep=? WHERE user_id=?", (last_dep, user_id))


def send_main_menu(chat_id):
    inline_markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton("–ü–æ–∏—Å–∫ üîç", callback_data="adminka")
    btn2 = types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìÑ", callback_data="feedback")
    btn3 = types.InlineKeyboardButton("–ü—Ä–æ—á–µ–µ...", callback_data="other")
    inline_markup.add(btn1, btn2, btn3)

    photo_path = r"Photo/photo_2025-09-20_17-49-18.jpg"
    with open(photo_path, "rb") as photo_file:
        bot.send_photo(chat_id, photo=photo_file, reply_markup=inline_markup)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def handle_back(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    cursor.execute("SELECT phone_number FROM user_info WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    phone_saved = row and row[0]

    if not phone_saved:
        # –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn_contact = types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è üìû", request_contact=True)
        markup.add(btn_contact)
        bot.send_message(chat_id, "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å c –ø–æ–º–æ—â—å—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!", reply_markup=markup)
        return

    send_main_menu(chat_id)

@bot.message_handler(func=lambda message: message.text and message.text.startswith("!!"))
def feedback_handler(message):
    feedback_text = message.text[2:].strip()
    bot.send_message(ADMIN_ID,
                     f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.first_name} (@{message.from_user.username}):\n\n{feedback_text}")
    bot.reply_to(message, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ Mr.MUFDINüëæ")


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    bot.answer_callback_query(call.id)

    cursor.execute("SELECT phone_number FROM user_info WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    phone_saved = row[0] if row else None

    if call.data == "adminka":
        if not phone_saved:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è üìû", request_contact=True))
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)
        else:
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(
                types.InlineKeyboardButton("–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç", callback_data="search"),
                types.InlineKeyboardButton("–¢–∞—Ä–∏—Ñ—ã üíµ", callback_data="tariffs"),
                types.InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚ùï", callback_data="info"),
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            )
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)

    elif call.data == "search":
        if not phone_saved:
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞!")
            return
        cursor.execute("SELECT searches FROM search_limits WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        searches_left = row[0] if row else 0
        if searches_left <= 0:
            bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ —Ç–∞—Ä–∏—Ñ—ã!")
            return
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID/USERNAME/PHONE NUMBER")

    elif call.data == "tariffs":
        if not phone_saved:
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞!")
            return
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            #types.InlineKeyboardButton("$", callback_data="tariff_money"),
            types.InlineKeyboardButton("–ò–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ ·õñ", callback_data="tariff_geme_maney"),
            types.InlineKeyboardButton("Telegram Stars‚≠ê", callback_data="tariff_stars"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="adminka")
        )
        bot.send_message(chat_id, "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)

    elif call.data == "tariff_money":
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("2 $ = 5 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_money1"),
            types.InlineKeyboardButton("5 $ = 15 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_money2"),
            types.InlineKeyboardButton("10 $ = 40 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_money3"),
            types.InlineKeyboardButton("20 $ = 100 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_money4"),
            types.InlineKeyboardButton("50 $ = 300 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_money5"),
            types.InlineKeyboardButton("100 $ = 700 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_money6"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tariffs")
        )
        bot.send_message(chat_id, "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ $:", reply_markup=markup)

    elif call.data == "search_name":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è/ID/username –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        bot.register_next_step_handler_by_chat_id(chat_id, process_search)

    elif call.data == "tariff_geme_maney":
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("1000 ·õñ = 1 –ó–∞–ø—Ä–æ—Å", callback_data="tariff_geme_maney1"),
            types.InlineKeyboardButton("5000 ·õñ = 7 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_geme_maney2"),
            types.InlineKeyboardButton("10000 ·õñ = 20 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_geme_maney3"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tariffs")
        )
        bot.send_message(chat_id, "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ ·õñ:", reply_markup=markup)

    elif call.data == "tariff_stars":
        markup = types.InlineKeyboardMarkup(row_width=1)
        for key, info in STARS_TARIFFS.items():
            price = info["stars"]
            searches = info["searches"]
            markup.add(types.InlineKeyboardButton(f"{price}‚≠ê = {searches} –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data=f"buy_{key}"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tariffs"))
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ ‚≠ê:", reply_markup=markup)

    elif call.data in (
            "tariff_geme_maney1", "tariff_geme_maney2", "tariff_geme_maney3"
    ):
        tariffs = {
            "tariff_geme_maney1": (1000, 1),
            "tariff_geme_maney2": (5000, 7),
            "tariff_geme_maney3": (10000, 20)
        }
        cost, searches_add = tariffs[call.data]

        cursor.execute("SELECT points FROM players WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        points = row[0] if row else 0
        if points < cost:
            bot.send_message(chat_id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤!")
            return

        cursor.execute("UPDATE players SET points = points - ? WHERE user_id=?", (cost, user_id))

        cursor.execute("SELECT searches FROM search_limits WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        if row:
            searches = row[0]
            cursor.execute("UPDATE search_limits SET searches = searches + ? WHERE user_id=?",
                           (searches_add, user_id))
        else:
            cursor.execute("INSERT INTO search_limits (user_id, searches) VALUES (?, ?)",
                           (user_id, searches_add))

        conn.commit()
        bot.send_message(chat_id, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {searches_add} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!")

    elif call.data.startswith("buy_"):
        tariff_key = call.data.replace("buy_", "")
        if tariff_key not in STARS_TARIFFS:
            return
        info = STARS_TARIFFS[tariff_key]
        price = info["stars"]
        searches_add = info["searches"]
        labeled_price = [types.LabeledPrice(label=f"{searches_add} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", amount=price)]
        bot.send_invoice(
            chat_id=chat_id,
            title=f"{searches_add} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
            description=f"–û–ø–ª–∞—Ç–∞ {price}‚≠ê –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {searches_add} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
            invoice_payload=tariff_key,
            provider_token=provider_token,
            currency="XTR",
            prices=labeled_price
        )

    elif call.data == "feedback":
        bot.send_message(
            chat_id,
            "–≠—Ç–æ—Ç –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ –≥–ª–∞–∑ Mr.MUFDINüëæ\n\n"
            "–û–Ω –ø—Ä–∏–∑–≤–∞–Ω –∑–∞–º–µ–Ω–∏—Ç—å —Ç–∞–∫–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –±–æ—Ç—ã, –∫–∞–∫ ¬´–®–µ—Ä–ª–æ–∫¬ª –∏ –µ–≥–æ –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∫–æ–ø–∏–∏, –∞ —Ç–∞–∫–∂–µ –¥–∞–≤–Ω–æ –∑–∞–±—ã—Ç—ã–π, –Ω–æ –≤—Å—ë –µ—â—ë –Ω–µ –±–µ–∑—ã–∑–≤–µ—Å—Ç–Ω—ã–π ¬´–ì–ª–∞–∑ –±–æ–≥–∞¬ª.\n\n"
            "–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∏—Ö Telegram ID, username –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
            "–¢–∞–∫–∂–µ –º—ã –ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–∞—à –∞—Ä—Å–µ–Ω–∞–ª –≤ –±—É–¥—É—â–µ–º –∏ –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º—Å—è –∑–∞—Ü–∏–∫–ª–∏–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –¢–µ–ª–µ–≥—Ä–∞–º–µ.\n\n"
            "–¢–∞–∫–∂–µ –º—ã –±—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏, —á—Ç–æ–±—ã –Ω–∞—à –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Å —Ü–µ–ª—å—é –Ω–∞–≤—Ä–µ–¥–∏—Ç—å –∫–æ–º—É-–ª–∏–±–æ. –ï—Å–ª–∏ –≤—ã —Å—Ç–∞–ª–∏ —Å–≤–∏–¥–µ—Ç–µ–ª–µ–º —Ç–∞–∫–æ–≥–æ, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º Mr.MUFDIN.\n\n"
            "–°–≤—è–∑–∞—Ç—å—Å—è —Å Mr.MUFDIN –º–æ–∂–Ω–æ, –ø–æ—Å—Ç–∞–≤–∏–≤ ¬´!!¬ª –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
            "P.S. –£–±–∏–π—Ü–∞ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç —Å–º–µ—Ä—Ç–∏.\nMr.MUFDIN"
        )

    elif call.data == "info":
        cursor.execute("SELECT searches FROM search_limits WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        if row:
            searches_left = row[0]
            searches_text = str(searches_left)
        else:
            searches_text = "0"

        message_text = f"""
    –ë–æ—Ç —Å–ø–æ—Å–æ–±–µ–Ω –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ <b>ID</b>, <b>USERNAME</b> –∏ <b>PHONE NUMBER</b>.

    <b>USERNAME</b>
    <code>@username</code> ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n
    <code>username</code> ‚Äî –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ

    <b>ID</b>
    <code>123456</code> ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n
    <code>123 456</code> ‚Äî –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ

    <b>PHONE NUMBER</b>
    <code>+491231231231</code> , <code>491231231231</code> , <code>01231231231</code> ,\n <code> +49 1231231231</code> ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n
    <code>1231231231</code> , <code>491231 1231</code> ‚Äî –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ

    <b>‚Ñπ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å:</b> <b>{searches_text}</b> –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
    """

        bot.send_message(
            chat_id,
            message_text,
            parse_mode="HTML"
        )

    elif call.data == "other":
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª/—á–∞—Ç!",
                                       url="https://t.me/ArgusM_bot?startgroup=true"),
            types.InlineKeyboardButton("–ö–∞–Ω–∞–ª Mr.MUFFDINüëæ", url="https://t.me/+wDw25hUBPd1mMGVi"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)

    elif call.data == "back_to_main":
        send_main_menu(chat_id)


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@bot.message_handler(content_types=["successful_payment"])
def got_payment(message):
    user_id = message.from_user.id
    invoice_payload = message.successful_payment.invoice_payload

    tariff_info = STARS_TARIFFS[invoice_payload]
    searches_add = tariff_info["searches"]
    price_stars = tariff_info["stars"]

    cursor.execute("SELECT searches FROM search_limits WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    if row:
        new_searches = row[0] + searches_add
        cursor.execute("UPDATE search_limits SET searches=? WHERE user_id=?", (new_searches, user_id))
    else:
        new_searches = searches_add
        cursor.execute("INSERT INTO search_limits (user_id, searches) VALUES (?, ?)", (user_id, new_searches))

    conn.commit()
    bot.send_message(
        user_id,
        f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {searches_add} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –°–µ–π—á–∞—Å —É –≤–∞—Å: {new_searches} –∑–∞–ø—Ä–æ—Å–æ–≤."
    )

    cursor.execute(
        """
        INSERT INTO pending_payments (user_id, order_id, invoice_url, tariff, status)
        VALUES (?, ?, ?, ?, ?)
        """,
        (
            user_id,
            message.successful_payment.provider_payment_charge_id,
            message.successful_payment.invoice_payload,
            invoice_payload,
            "completed"
        )
    )
    conn.commit()

    bot.send_message(
        ADMIN_ID,
        f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} (ID: {user_id}) –æ–ø–ª–∞—Ç–∏–ª —Ç–∞—Ä–∏—Ñ {invoice_payload} –∑–∞ {price_stars}‚≠ê –∏ –ø–æ–ª—É—á–∏–ª {searches_add} –∑–∞–ø—Ä–æ—Å–æ–≤."
    )

@bot.message_handler(commands=['roll'])
def roll_cmd(message):
    user_id = message.from_user.id
    name = message.from_user.first_name
    item = roll_item(user_id, message.chat.id, bot, items)

    if "price" in item:
        bot.send_message(message.chat.id, f"{name}, —Ç—ã {item['emoji']} –∏ –ø–æ–ª—É—á–∏–ª {item['price']}·õñ!")
    else:
        bot.send_message(message.chat.id, f"{name}, —Ç—ã {item['emoji']}!")

@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    if not message.contact or not message.contact.phone_number:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    phone = normalize_phone(message.contact.phone_number)
    if not phone:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    user_id = message.from_user.id

    with conn:
        cursor = conn.cursor()
        cursor.execute("""
                       INSERT INTO user_info (user_id, phone_number)
                       VALUES (?, ?) ON CONFLICT(user_id) DO
                       UPDATE SET phone_number=excluded.phone_number
                       """, (user_id, phone))

        cursor.execute("SELECT searches FROM search_limits WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        if not row:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí –¥–∞—ë–º 0 –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            cursor.execute(
                "INSERT INTO search_limits (user_id, searches) VALUES (?, ?)",
                (user_id, 0)
            )

    bot.send_message(message.chat.id, "‚úÖ –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã.")

    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –ë–î", callback_data="search_name"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    bot.send_message(message.chat.id, "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:", reply_markup=markup)

@bot.message_handler(commands=["dep"])
def dep(message):
    user_id = message.from_user.id
    name = message.from_user.first_name
    current_time = int(time.time())

    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM players WHERE user_id=?", (user_id,))
        player = cursor.fetchone()

        if not player:
            cursor.execute(
                "INSERT INTO players (user_id, name, points, last_dep, got_muffdin) VALUES (?, ?, 0, 0, 0)",
                (user_id, name)
            )
            points, last_dep = 0, 0
        else:
            points, last_dep = player[2], player[3] or 0

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–ø–∞ (8 —á–∞—Å–æ–≤)
        if current_time - last_dep >= 8 * 3600:
            item = roll_item(user_id, message.chat.id, bot, items)

            new_points = points + item.get("price", 0)
            cursor.execute(
                "UPDATE players SET points=?, last_dep=? WHERE user_id=?",
                (new_points, current_time, user_id)
            )
            conn.commit()

            bot.send_message(message.chat.id,
                             f"{name}, —Ç—ã {item['emoji']} –∏ –ø–æ–ª—É—á–∏–ª {item.get('price', 0)}·õñ!\nüí∞ –°–µ–π—á–∞—Å —É —Ç–µ–±—è: {new_points}·õñ")
        else:
            remaining = 8 * 3600 - (current_time - last_dep)
            hours = remaining // 3600
            minutes = (remaining % 3600) // 60
            bot.reply_to(message, f"{name}, –∂–¥–∏ –µ—â—ë {hours} —á {minutes} –º–∏–Ω.")

    log_user_info(message)

@bot.message_handler(commands=["stats"])
def stats(message):
    user_id = message.from_user.id
    name = message.from_user.first_name
    save_chat_info(message)

    player = get_player(user_id, name)
    points = player[2]
    last_dep = player[3]
    current_time = int(time.time())

    if current_time - last_dep >= 8 * 3600:
        wait = "–ú–æ–∂–Ω–æ –¥–µ–ø–∞—Ç—å!"
    else:
        remaining = 8 * 3600 - (current_time - last_dep)
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        wait = f"–ñ–¥–∞—Ç—å –µ—â—ë {hours} —á {minutes} –º–∏–Ω"

    bot.reply_to(message, f"{name}, —Ç–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª: {points}\n{wait}")
    log_user_info(message)

@bot.message_handler(commands=["topchat"])
def top_chat(message):
    chat_id = message.chat.id
    cursor.execute("""
                   SELECT p.name, p.points
                   FROM players p
                            JOIN chat_info c ON p.user_id = c.user_id
                   WHERE c.chat_id = ?
                   ORDER BY p.points DESC LIMIT 10
                   """, (chat_id,))
    leaders = cursor.fetchall()
    text = "üèÜ –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤ —á–∞—Ç–∞:\n"
    for i, (name, points) in enumerate(leaders, start=1):
        text += f"{i}. {name} ‚Äî {points} ·õñ!\n"
    bot.reply_to(message, text)
    log_user_info(message)

@bot.message_handler(commands=["topworld"])
def top_world(message):
    cursor.execute("SELECT name, points FROM players ORDER BY points DESC LIMIT 10")
    leaders = cursor.fetchall()
    text = "üåç –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤ –º–∏—Ä–∞:\n"
    for i, (name, points) in enumerate(leaders, start=1):
        text += f"{i}. {name} ‚Äî {points} ·õñ!\n"
    bot.reply_to(message, text)
    log_user_info(message)

def ensure_search_limit(user_id):
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT searches FROM search_limits WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        if not row:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí –¥–∞—ë–º 0 –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            cursor.execute(
                "INSERT INTO search_limits (user_id, searches) VALUES (?, ?)",
                (user_id, 0)
            )

def analyze_phone_full(phone_str):
    result = {
        "raw_input": phone_str,
        "parsed": None,
        "valid": False,
        "possible": False,
        "e164": None,
        "international": None,
        "national": None,
        "rfc3966": None,
        "country_code": None,
        "region_code": None,
        "region_description": None,
        "carrier": None,
        "number_type": None,
        "type_name": None,
        "timezones": [],
        "utc_offsets": [],
        "example_number": None,
        "example_mobile": None,
        "example_fixed": None
    }

    phone_str = phone_str.strip()

    if not phone_str.startswith("+"):
        phone_str = "+" + re.sub(r"\D", "", phone_str)

    try:
        num = phonenumbers.parse(phone_str, None)
        result["parsed"] = str(num)
    except phonenumbers.NumberParseException as e:
        result["error"] = f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}"
        return result

    result["possible"] = phonenumbers.is_possible_number(num)
    result["valid"] = phonenumbers.is_valid_number(num)

    try:
        result["e164"] = phonenumbers.format_number(num, phonenumbers.PhoneNumberFormat.E164)
        result["international"] = phonenumbers.format_number(num, phonenumbers.PhoneNumberFormat.INTERNATIONAL)
        result["national"] = phonenumbers.format_number(num, phonenumbers.PhoneNumberFormat.NATIONAL)
        result["rfc3966"] = phonenumbers.format_number(num, phonenumbers.PhoneNumberFormat.RFC3966)
    except Exception:
        pass

    result["country_code"] = num.country_code
    result["region_code"] = phonenumbers.region_code_for_number(num)

    try:
        result["region_description"] = ph_geocoder.description_for_number(num, "ru")
    except Exception:
        pass

    try:
        result["carrier"] = ph_carrier.name_for_number(num, "ru")
    except Exception:
        pass

    try:
        num_type = phonenumbers.number_type(num)
        result["number_type"] = num_type
        result["type_name"] = phonenumbers.NumberType._VALUES_TO_NAMES.get(num_type, "UNKNOWN")
    except Exception:
        pass

    try:
        tzs = ph_timezone.time_zones_for_number(num)
        result["timezones"] = list(tzs)
        offsets = []
        for tz in tzs:
            try:
                tzobj = ZoneInfo(tz)
                now = datetime.now(tzobj)
                offset = now.utcoffset()
                if offset is not None:
                    total_minutes = offset.total_seconds() // 60
                    hours, minutes = divmod(abs(int(total_minutes)), 60)
                    sign = "+" if total_minutes >= 0 else "-"
                    offsets.append(f"{sign}{hours:02d}:{minutes:02d}")
            except Exception:
                offsets.append("unknown")
        result["utc_offsets"] = offsets
    except Exception:
        pass

    return result

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    text = message.text.strip() if message.text else ""

    log_user_info(message)

    if message.chat.type != "private":

        if text.startswith("/roll"):
            roll_cmd(message)
        elif text.startswith("/dep"):
            dep(message)
        elif text.startswith("/stats"):
            stats(message)
        elif text.startswith("/topchat"):
            top_chat(message)
        elif text.startswith("/topworld"):
            top_world(message)

        return

    if message.chat.type == "private":
        process_search(message, text)

def process_search(message, query):
    if not query:
        return

    chat_id = message.chat.id
    user_id = message.from_user.id

    conn.row_factory = sqlite3.Row
    cur = conn.cursor()

    field = value = None
    query = query.strip()
    if query.startswith("@"):
        field = "username"
        value = query[1:].split()[0].split("@")[0].lower()
    elif query.isdigit() and len(query) <= 10:
        field = "user_id"
        value = int(query)
    elif re.fullmatch(r"\+?\d[\d\s-]{6,14}\d", query):
        field = "phone_number"
        value = normalize_phone(query)
        if not value:
            bot.reply_to(message, "‚ö† –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.")
            return
    else:
        bot.reply_to(message, "‚ö† –í–≤–µ–¥–∏—Ç–µ @username, ID –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    cur.execute("SELECT searches FROM search_limits WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    if not row:
        bot.reply_to(message, "‚ö† –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!")
        return

    searches = row["searches"]
    if searches <= 0:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!")
        return

    if field == "username":
        cur.execute("SELECT * FROM user_info WHERE LOWER(username)=?", (value,))
    elif field == "phone_number":
        cur.execute("SELECT * FROM user_info WHERE phone_number=?", (value,))
    else:
        cur.execute("SELECT * FROM user_info WHERE user_id=?", (value,))
    user = cur.fetchone()

    if not user:
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å {field}={query} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    uid = user["user_id"]
    uname = user["username"] or "‚Äî"
    fname = user["first_name"] or "‚Äî"
    lname = user["last_name"] or "‚Äî"
    phone = normalize_phone(user["phone_number"]) if user["phone_number"] else "‚Äî"
    lang = user["language_code"] or "‚Äî"

    cur.execute(
        "SELECT old_username, new_username, changed_at FROM username_history WHERE user_id=? ORDER BY changed_at DESC",
        (uid,)
    )
    history = cur.fetchall()
    history_text = "\n".join([f"{h['old_username']} ‚Üí {h['new_username']} ({h['changed_at']})" for h in history]) or "‚Äî"

    cur.execute("SELECT COUNT(*) as cnt FROM chat_info WHERE user_id=?", (uid,))
    row = cur.fetchone()
    chats_count = row["cnt"] if row else "‚Äî"

    cur.execute(
        "SELECT entity_type, entity_value, created_at FROM user_entities WHERE user_id=? ORDER BY created_at DESC",
        (uid,)
    )
    entities = cur.fetchall()
    full_entities_text = None
    if entities:
        last_10 = entities[:10]
        entities_text = "\n".join([f"{e['entity_type']}: {e['entity_value']} ({e['created_at']})" for e in last_10])
        if len(entities) > 10:
            full_entities_text = "\n".join(
                [f"{e['entity_type']}: {e['entity_value']} ({e['created_at']})" for e in entities])
    else:
        entities_text = "‚Äî"

    if phone != "‚Äî":
        analysis = analyze_phone_full(phone)
        phone_formatted = analysis.get("e164") or phone
        region_code = analysis.get("region_code") or "‚Äî"
        country_code = analysis.get("country_code") or "‚Äî"
        region_desc = analysis.get("region_description") or "‚Äî"
        carrier_name = analysis.get("carrier") or "‚Äî"
        tzs_str = ", ".join(analysis.get("timezones", [])) or "‚Äî"
        utc_str = ", ".join(analysis.get("utc_offsets", [])) or "‚Äî"
    else:
        phone_formatted = region_code = country_code = region_desc = carrier_name = tzs_str = utc_str = "‚Äî"

    cur.execute("SELECT chat_id, title, username, type FROM chat_info WHERE user_id=? ORDER BY chat_id", (uid,))
    all_chats = cur.fetchall()
    if all_chats:
        chats_text = "\n".join([
            f"{c['title'] or '‚Äî'} (@{c['username'] or '‚Äî'}) [{c['type']}]"
            for c in all_chats
        ])
    else:
        chats_text = "‚Äî"

    reply = f"""
<b>‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>
<b>ID:</b> <code>{uid}</code>
<b>Username:</b> @{uname}
<b>–ò–º—è:</b> {fname}
<b>–§–∞–º–∏–ª–∏—è:</b> {lname}
<b>–Ø–∑—ã–∫:</b> {lang}
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –æ—Ç:</b> {chats_count}

<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω</b>
<b>–ù–æ–º–µ—Ä:</b> <code>{phone_formatted}</code>
<b>–°—Ç—Ä–∞–Ω–∞ / —Ä–µ–≥–∏–æ–Ω:</b> {region_code} 
<b>–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã:</b> +{country_code}
<b>–†–µ–≥–∏–æ–Ω:</b> {region_desc}
<b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> {carrier_name}
<b>–¢–∞–π–º–∑–æ–Ω–∞:</b> {tzs_str}
<b>–°–º–µ—â–µ–Ω–∏–µ UTC:</b> {utc_str}

<b>üìå–ß–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>
<pre>{chats_text}</pre>
<b>üìú –ò—Å—Ç–æ—Ä–∏—è username:</b>
<pre>{history_text}</pre>
<b>üóÇ–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—É—â–Ω–æ—Å—Ç–µ–π:</b>
<pre>{entities_text}</pre>
""".strip()

    wa_link = get_whatsapp_link(phone_formatted) if phone != "‚Äî" else None

    if uname != "‚Äî":
        tg_link = f"https://t.me/{uname}"
    else:
        tg_link = f"tg://user?id={uid}"

    markup = types.InlineKeyboardMarkup(row_width=2)
    if wa_link:
        markup.add(types.InlineKeyboardButton("WhatsApp üìû", url=wa_link))
    if tg_link:
        markup.add(types.InlineKeyboardButton("Telegram üí¨", url=tg_link))

    bot.send_message(
        chat_id,
        reply,
        reply_markup=markup,
        parse_mode="HTML"
    )

    if full_entities_text:
        file_bytes = io.BytesIO(full_entities_text.encode("utf-8"))
        file_bytes.name = f"entities_{uid}.txt"
        bot.send_document(chat_id, file_bytes)

if __name__ == "__main__":
    bot.infinity_polling()