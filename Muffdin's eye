import telebot
from telebot import types
import sqlite3
from flask import Flask, request
import json
import random
import re
import time
import time
import requests

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ===
TOKEN = ""
ADMIN_ID = 
PASSWORD = 

bot = telebot.TeleBot(TOKEN, parse_mode='HTML')
bot.remove_webhook()

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===
conn = sqlite3.connect("game.db", check_same_thread=False)
cursor = conn.cursor()


def check_password(message):
    user_id = message.from_user.id
    password = message.text.strip()

    if password == str(PASSWORD):  # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º unlimited
        cursor.execute("""
            INSERT INTO search_limits (user_id, searches, unlimited)
            VALUES (?, 0, 1) 
            ON CONFLICT(user_id) DO UPDATE SET unlimited=1
        """, (user_id,))
        conn.commit()

        bot.reply_to(message, "‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã.")
    else:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")


# === –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü ===

cursor.execute("""
CREATE TABLE IF NOT EXISTS pending_payments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    order_id TEXT,
    invoice_url TEXT,
    tariff TEXT,
    status TEXT DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")
conn.commit()

cursor.execute("""
CREATE TABLE IF NOT EXISTS search_limits (
    user_id INTEGER PRIMARY KEY,
    searches INTEGER DEFAULT 0,
    unlimited INTEGER DEFAULT 0
)
""")
conn.commit()

cursor.execute("""
CREATE TABLE IF NOT EXISTS user_entities (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    entity_type TEXT,
    entity_value TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS players (
    user_id INTEGER PRIMARY KEY,
    name TEXT,
    points INTEGER DEFAULT 0,
    last_dep INTEGER DEFAULT 0
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS chat_info (
    chat_id INTEGER,
    user_id INTEGER,
    title TEXT,
    username TEXT,
    type TEXT,
    PRIMARY KEY(chat_id, user_id)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS user_info (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    is_bot INTEGER,
    phone_number TEXT,
    language_code TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS username_history (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    old_username TEXT,
    new_username TEXT,
    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")

conn.commit()

# === –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã ===
items = [
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üí¥ ", "price": 5, "chance": 30},
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üíµ ", "price": 10, "chance": 25},
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üí∂ ", "price": 20, "chance": 20},
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üí∑ ", "price": 30, "chance": 15},
    {"emoji": "–Ω–∞—à—ë–ª üí∞ ", "price": 50, "chance": 10},
    {"emoji": "–Ω–∞—à—ë–ª üíé ", "price": 100, "chance": 5},
    {"emoji": "–æ–≥—Ä–∞–±–∏–ª –±–∞–Ω–∫ üè¶ ", "price": 200, "chance": 3},
    {"emoji": "–Ω–∞—à—ë–ª üí≥ ", "price": random.randint(0, 500), "chance": 5},
    {"emoji": "–Ω–∞—à—ë–ª üìÄ —Å –±–∏—Ç–∫–æ–∏–Ω–∞–º–∏ ", "price": random.randint(300, 500), "chance": 2},
    {"emoji": "–ø—Ä–æ–ø–∏–ª üí∏ ", "price": -5, "chance": 15},
    {"emoji": "–¥–µ–ø–Ω—É–ª üí∏ ", "price": -10, "chance": 12},
    {"emoji": "–∑–∞–¥–æ–Ω–∞—Ç–∏–ª —Å—Ç—Ä–∏–º–µ—Ä—É üí∏ ", "price": -20, "chance": 10},
    {"emoji": "–≤—Å—Ç—Ä–µ—Ç–∏–ª Mr.Muffdinüëæ ", "price": 0.666, "chance": 1},
]

tariffs_amounts = {
    "tariff_money1": 5,
    "tariff_money2": 15,
    "tariff_money3": 40,
    "tariff_money4": 100,
    "tariff_money5": 300,
    "tariff_money6": 700
}

# === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î ===
def save_user_info(message, contact=None):
    user = message.from_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
    cursor.execute("SELECT phone_number, username FROM user_info WHERE user_id=?", (user.id,))
    row = cursor.fetchone()
    old_phone = row[0] if row else None
    old_username = row[1] if row else None

    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é username
    if old_username and old_username != user.username:
        cursor.execute("""
        INSERT INTO username_history (user_id, old_username, new_username)
        VALUES (?, ?, ?)
        """, (user.id, old_username, user.username))

    # –ï—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–µ–ª –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –Ω–æ–º–µ—Ä
    new_phone = contact.phone_number if contact else old_phone

    cursor.execute("""
    INSERT INTO user_info (user_id, username, first_name, last_name, is_bot, phone_number, language_code)
    VALUES (?, ?, ?, ?, ?, ?, ?)
    ON CONFLICT(user_id) DO UPDATE SET
        username=excluded.username,
        first_name=excluded.first_name,
        last_name=excluded.last_name,
        is_bot=excluded.is_bot,
        phone_number=excluded.phone_number,
        language_code=excluded.language_code
    """, (
        user.id,
        user.username,
        user.first_name,
        user.last_name,
        int(user.is_bot),
        new_phone,
        user.language_code
    ))
    conn.commit()

def save_chat_info(message):
    chat = message.chat
    user = message.from_user
    cursor.execute("""
    INSERT INTO chat_info (chat_id, user_id, title, username, type)
    VALUES (?, ?, ?, ?, ?)
    ON CONFLICT(chat_id, user_id) DO UPDATE SET
        title=excluded.title,
        username=excluded.username,
        type=excluded.type
    """, (
        chat.id,
        user.id,
        getattr(chat, "title", None),
        getattr(chat, "username", None),
        chat.type
    ))
    conn.commit()

def save_entities(message):
    if not message.text:
        return

    if message.entities:
        relevant_types = {'url', 'email', 'phone_number'}
        for entity in message.entities:
            if entity.type in relevant_types:
                start = entity.offset
                end = start + entity.length
                value = message.text[start:end]
                cursor.execute("""
                INSERT INTO user_entities (user_id, entity_type, entity_value)
                VALUES (?, ?, ?)
                """, (message.from_user.id, entity.type, value))

    urls = re.findall(r'https?://\S+', message.text)
    emails = re.findall(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', message.text)
    for url in urls:
        cursor.execute("""
        INSERT INTO user_entities (user_id, entity_type, entity_value)
        VALUES (?, ?, ?)
        """, (message.from_user.id, 'url', url))
    for email in emails:
        cursor.execute("""
        INSERT INTO user_entities (user_id, entity_type, entity_value)
        VALUES (?, ?, ?)
        """, (message.from_user.id, 'email', email))

    conn.commit()

def log_user_info(message, contact=None):
    save_user_info(message, contact)
    save_chat_info(message)
    save_entities(message)

def roll_item():
    r = random.randint(1, sum(item["chance"] for item in items))
    cumulative = 0
    for item in items:
        cumulative += item["chance"]
        if r <= cumulative:
            if item["emoji"] in ["–Ω–∞—à—ë–ª üí≥", "–Ω–∞—à—ë–ª üìÄ —Å –±–∏—Ç–∫–æ–∏–Ω–∞–º–∏"]:
                item["price"] = random.randint(0, 500) if item["emoji"] == "–Ω–∞—à—ë–ª üí≥" else random.randint(300, 500)
            return item

def get_player(user_id, name):
    cursor.execute("SELECT * FROM players WHERE user_id=?", (user_id,))
    player = cursor.fetchone()
    if not player:
        cursor.execute("INSERT INTO players (user_id, name) VALUES (?, ?)", (user_id, name))
        conn.commit()
        return (user_id, name, 0, 0)
    else:
        cursor.execute("UPDATE players SET name=? WHERE user_id=?", (name, user_id))
        conn.commit()
        return player

def update_player(user_id, points=None, last_dep=None):
    if points is not None and last_dep is not None:
        cursor.execute("UPDATE players SET points=?, last_dep=? WHERE user_id=?", (points, last_dep, user_id))
    elif points is not None:
        cursor.execute("UPDATE players SET points=? WHERE user_id=?", (points, user_id))
    elif last_dep is not None:
        cursor.execute("UPDATE players SET last_dep=? WHERE user_id=?", (last_dep, user_id))
    conn.commit()

@bot.message_handler(commands=['start'])
def start_command(message):
    log_user_info(message)
    send_main_menu(message.chat.id)

def send_main_menu(chat_id):
    inline_markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton("–ü–æ–∏—Å–∫ üîç", callback_data="adminka")
    btn2 = types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìÑ", callback_data="feedback")
    btn3 = types.InlineKeyboardButton("–ü—Ä–æ—á–µ–µ...", callback_data="other")
    inline_markup.add(btn1, btn2, btn3)

    photo_path = r"Photo/photo_2025-09-20_17-49-18.jpg"
    with open(photo_path, "rb") as photo_file:
        bot.send_photo(chat_id, photo=photo_file, reply_markup=inline_markup)


@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def handle_back(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    cursor.execute("SELECT phone_number FROM user_info WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    phone_saved = row and row[0]

    if not phone_saved:
        # –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn_contact = types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è üìû", request_contact=True)
        markup.add(btn_contact)
        bot.send_message(chat_id, "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å c –ø–æ–º–æ—â—å—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)
        return

    # –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å—Ç—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    send_main_menu(chat_id)

@bot.message_handler(func=lambda message: message.text and message.text.startswith("!!"))
def feedback_handler(message):
    feedback_text = message.text[2:].strip()
    bot.send_message(ADMIN_ID, f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.first_name} (@{message.from_user.username}):\n\n{feedback_text}")
    bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É ‚úÖ")

# === Callback-–º–µ–Ω—é ===
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    bot.answer_callback_query(call.id)

    if call.data == "adminka":
        cursor.execute("SELECT phone_number FROM user_info WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        phone_saved = row and row[0]
        if not phone_saved:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            btn_contact = types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è üìû", request_contact=True)
            markup.add(btn_contact)
            bot.send_message(chat_id, "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å c –ø–æ–º–æ—â—å—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)
        else:
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(
                types.InlineKeyboardButton("–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç", callback_data="search"),
                types.InlineKeyboardButton("–¢–∞—Ä–∏—Ñ—ã üíµ", callback_data="tariffs"),
                types.InlineKeyboardButton("–ò–Ω—Ñ–æ ‚ùï", callback_data="info"),
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            )
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)

    elif call.data == "tariffs":
        markup = types.InlineKeyboardMarkup(row_width=1)  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        btn_basic = types.InlineKeyboardButton("$", callback_data="tariff_money")
        btn_vip = types.InlineKeyboardButton("·õñ", callback_data="tariff_geme_maney")
        markup.add(btn_basic, btn_vip)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        btn_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        markup.add(btn_back)
        bot.send_message(chat_id, "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)

    if call.data == "tariff_money":
        markup = types.InlineKeyboardMarkup(row_width=2)

        # –®–µ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ (–ø–æ 2 –≤ —Ä—è–¥)
        btn1 = types.InlineKeyboardButton("2 $ = 5 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_money1")
        btn2 = types.InlineKeyboardButton("5 $ = 15 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_money2")
        btn3 = types.InlineKeyboardButton("10 $ = 40 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_money3")
        btn4 = types.InlineKeyboardButton("20 $ = 100 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_money4")
        btn5 = types.InlineKeyboardButton("50 $ = 300 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_money5")
        btn6 = types.InlineKeyboardButton("100 $ = 700 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_money6")
        btn6 = types.InlineKeyboardButton("100 $ = 700 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_money6")

        markup.add(btn1, btn2, btn3, btn4, btn5, btn6)

        # –ë–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞ (–∑–∞–Ω–∏–º–∞–µ—Ç –≤–µ—Å—å —Ä—è–¥)
        big_btn = types.InlineKeyboardButton("PINüîê", callback_data="PIN")
        markup.add(big_btn)

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        btn_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        markup.add(btn_back)

        bot.send_message(chat_id, "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)

    if call.data == "tariff_geme_maney":
        markup = types.InlineKeyboardMarkup(row_width=1)

        # –®–µ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ (–ø–æ 2 –≤ —Ä—è–¥)
        btn1 = types.InlineKeyboardButton("1000 ·õñ = 1 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_geme_maney1")
        btn2 = types.InlineKeyboardButton("5000 ·õñ = 7 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_geme_maney2")
        btn3 = types.InlineKeyboardButton("10 000 ·õñ = 20 –ó–∞–ø—Ä–æ—Å–æ–≤", callback_data="tariff_geme_maney3")

        markup.add(btn1, btn2, btn3)

        # –ë–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞ (–∑–∞–Ω–∏–º–∞–µ—Ç –≤–µ—Å—å —Ä—è–¥)
        big_btn = types.InlineKeyboardButton("PINüîê", callback_data="PIN")
        markup.add(big_btn)

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        btn_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        markup.add(btn_back)

        bot.send_message(chat_id, "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)

    elif call.data == "feedback":
        bot.send_message(chat_id, "...")

    elif call.data == "info":
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT searches, unlimited FROM search_limits WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        if row:
            searches, unlimited = row
            searches_text = "‚àû" if unlimited else str(searches)
        else:
            searches_text = "0"

        bot.send_message(chat_id, f"‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ:\n–û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {searches_text}")

    elif call.data == "search":
            markup = types.InlineKeyboardMarkup(row_width=1)  # 1 –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥
            btn1 = types.InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –ë–î", callback_data="search_name")
            btn2 = types.InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="search_phone")
            btn3 = types.InlineKeyboardButton("–°–Ω–æ—Å", callback_data="search_email")
            markup.add(btn1, btn2, btn3)
            # –ö–Ω–æ–ø–∫–∞
            btn_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            markup.add(btn_back)
            bot.send_message(chat_id, "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:", reply_markup=markup)

    elif call.data == "search_name":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID/USERNAME")

    elif call.data == "other":
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª/—á–∞—Ç!", url="https://t.me/ArgusM_bot?startgroup=true"),
            types.InlineKeyboardButton("–ö–∞–Ω–∞–ª Mr.MUFFDINüëæ", url="https://t.me/+wDw25hUBPd1mMGVi"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)

    elif call.data == "PIN":
        bot.send_message(chat_id, "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        bot.register_next_step_handler(call.message, check_password)

    elif call.data.startswith("tariff_geme_maney"):
        user_id = call.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
        cursor.execute("SELECT points FROM players WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        if not row:
            bot.send_message(chat_id, "‚ö† –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dep")
            return
        points = row[0]

        # –¢–∞—Ä–∏—Ñ—ã (–æ—á–∫–∏ -> –∑–∞–ø—Ä–æ—Å—ã)
        tariffs = {
            "tariff_geme_maney1": (1000, 1),
            "tariff_geme_maney2": (5000, 7),
            "tariff_geme_maney3": (10000, 20)
        }

        cost, searches_add = tariffs[call.data]

        if points < cost:
            bot.send_message(chat_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤! –ù—É–∂–Ω–æ {cost}·õñ, —É –≤–∞—Å {points}·õñ")
            return

        # –°–ø–∏—Å—ã–≤–∞–µ–º –æ—á–∫–∏
        cursor.execute("UPDATE players SET points = points - ? WHERE user_id=?", (cost, user_id))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–∞
        cursor.execute("SELECT searches, unlimited FROM search_limits WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        if not row:
            cursor.execute(
                "INSERT INTO search_limits (user_id, searches, unlimited) VALUES (?, ?, 0)",
                (user_id, searches_add)
            )
        else:
            searches, unlimited = row
            if not unlimited:
                cursor.execute(
                    "UPDATE search_limits SET searches = searches + ? WHERE user_id=?",
                    (searches_add, user_id)
                )

        conn.commit()
        bot.send_message(chat_id, f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ {searches_add} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")

# === –ö–æ–Ω—Ç–∞–∫—Ç—ã ===
@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    if not message.contact:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ user_info
    cursor.execute("""
    INSERT INTO user_info (user_id, phone_number)
    VALUES (?, ?)
    ON CONFLICT(user_id) DO UPDATE SET phone_number=excluded.phone_number
    """, (message.from_user.id, message.contact.phone_number))
    conn.commit()

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    log_user_info(message, contact=message.contact)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    send_main_menu(message.chat.id)

    bot.send_message(message.chat.id, "‚úÖ –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞")


# === –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ===
@bot.message_handler(commands=["dep"])
def dep(message):
    user_id = message.from_user.id
    name = message.from_user.first_name
    save_chat_info(message)

    player = get_player(user_id, name)
    points = player[2]
    last_dep = player[3]
    current_time = int(time.time())

    if current_time - last_dep >= 8 * 3600:
        item = roll_item()
        new_points = points + item["price"]
        update_player(user_id, new_points, current_time)
        bot.reply_to(message, f"{name}, —Ç—ã {item['emoji']}{item['price']}·õñ!\n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {new_points}·õñ!")
    else:
        remaining = 8 * 3600 - (current_time - last_dep)
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        bot.reply_to(message, f"{name}, –∂–¥–∏ –µ—â—ë {hours} —á {minutes} –º–∏–Ω.")

    log_user_info(message)

@bot.message_handler(commands=["stats"])
def stats(message):
    user_id = message.from_user.id
    name = message.from_user.first_name
    save_chat_info(message)

    player = get_player(user_id, name)
    points = player[2]
    last_dep = player[3]
    current_time = int(time.time())

    if current_time - last_dep >= 8 * 3600:
        wait = "–ú–æ–∂–Ω–æ –¥–µ–ø–∞—Ç—å!"
    else:
        remaining = 8 * 3600 - (current_time - last_dep)
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        wait = f"–ñ–¥–∞—Ç—å –µ—â—ë {hours} —á {minutes} –º–∏–Ω"

    bot.reply_to(message, f"{name}, —Ç–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª: {points}\n{wait}")
    log_user_info(message)

@bot.message_handler(commands=["topchat"])
def top_chat(message):
    chat_id = message.chat.id
    cursor.execute("""
    SELECT p.name, p.points FROM players p
    JOIN chat_info c ON p.user_id = c.user_id
    WHERE c.chat_id=?
    ORDER BY p.points DESC
    LIMIT 10
    """, (chat_id,))
    leaders = cursor.fetchall()
    text = "üèÜ –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤ —á–∞—Ç–∞:\n"
    for i, (name, points) in enumerate(leaders, start=1):
        text += f"{i}. {name} ‚Äî {points} ·õñ!\n"
    bot.reply_to(message, text)
    log_user_info(message)

@bot.message_handler(commands=["topworld"])
def top_world(message):
    cursor.execute("SELECT name, points FROM players ORDER BY points DESC LIMIT 10")
    leaders = cursor.fetchall()
    text = "üåç –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤ –º–∏—Ä–∞:\n"
    for i, (name, points) in enumerate(leaders, start=1):
        text += f"{i}. {name} ‚Äî {points} ·õñ!\n"
    bot.reply_to(message, text)
    log_user_info(message)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤ ===
# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É –ª–∏–º–∏—Ç–æ–≤
def ensure_search_limit(user_id):
    cursor.execute("SELECT searches, unlimited FROM search_limits WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    if not row:
        cursor.execute("SELECT phone_number FROM user_info WHERE user_id=?", (user_id,))
        user_row = cursor.fetchone()
        phone = user_row[0] if user_row else None

        if phone:
            unlimited = 1
            searches = 0
        else:
            unlimited = 0
            searches = 5  # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ª–∏–º–∏—Ç

        cursor.execute(
            "INSERT INTO search_limits (user_id, searches, unlimited) VALUES (?, ?, ?)",
            (user_id, searches, unlimited)
        )
        conn.commit()

# === –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) ===
@bot.message_handler(func=lambda message: message.text and message.text.startswith("@"))
def get_user_info_by_username(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
    if message.chat.type != "private":
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø

    chat_id = message.chat.id
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT searches, unlimited FROM search_limits WHERE user_id=?", (user_id,))
    row = cursor.fetchone()

    if not row:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ ‚Äî —Å–æ–∑–¥–∞—ë–º —Å 0 –ø–æ–∏—Å–∫–æ–≤ –∏ unlimited=0
        cursor.execute("INSERT INTO search_limits (user_id, searches, unlimited) VALUES (?, 0, 0)", (user_id,))
        conn.commit()
        searches, unlimited = 0, 0
    else:
        searches, unlimited = row

    if not unlimited and searches <= 0:
        bot.reply_to(message, "‚ö† –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã!")
        return

    username = message.text[1:]  # —É–±–∏—Ä–∞–µ–º @
    cursor.execute("SELECT * FROM user_info WHERE username=?", (username,))
    user = cursor.fetchone()
    if not user:
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    uid, uname, fname, lname, is_bot, phone, lang = user
    phone = phone or "–ù–µ —É–∫–∞–∑–∞–Ω"
    lang = lang or "–ù–µ —É–∫–∞–∑–∞–Ω"

    # –ò—Å—Ç–æ—Ä–∏—è username
    cursor.execute(
        "SELECT old_username, new_username, changed_at FROM username_history WHERE user_id=? ORDER BY changed_at DESC",
        (uid,))
    history = cursor.fetchall()
    history_text = "\n".join([f"{old} ‚Üí {new} ({changed})" for old, new, changed in history]) or "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
    cursor.execute("SELECT COUNT(*) FROM chat_info WHERE user_id=?", (uid,))
    chats_count = cursor.fetchone()[0]

    # –°—É—â–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT entity_type, entity_value, created_at FROM user_entities WHERE user_id=?", (uid,))
    entities = cursor.fetchall()
    entities_text = "\n".join([f"{etype}: {value} ({created})" for etype, value, created in entities]) or "–ù–µ—Ç —Å—É—â–Ω–æ—Å—Ç–µ–π"

    bot.reply_to(message, f"""
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ @{username}:
ID: {uid}
–ò–º—è: {fname}
–§–∞–º–∏–ª–∏—è: {lname}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone}
–Ø–∑—ã–∫: {lang}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤: {chats_count}
–ò—Å—Ç–æ—Ä–∏—è username: {history_text}
–°—É—â–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {entities_text}
""")

    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤, –µ—Å–ª–∏ –Ω–µ unlimited
    if not unlimited:
        cursor.execute("UPDATE search_limits SET searches = searches - 1 WHERE user_id=?", (user_id,))
        conn.commit()

@bot.callback_query_handler(func=lambda call: call.data.startswith("tariff_money"))
def handle_tariff_payment(call):
    user_id = call.from_user.id
    tariff = call.data

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π order_id
    order_id = f"{user_id}_{int(time.time())}"

    # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤ NOWPayments)
    invoice_url = "https://nowpayments.io/invoice/example"  # –∑–¥–µ—Å—å —Ä–µ–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
    cursor.execute("""
    INSERT INTO pending_payments (user_id, order_id, invoice_url, tariff)
    VALUES (?, ?, ?, ?)
    """, (user_id, order_id, invoice_url, tariff))
    conn.commit()

    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"
    markup = types.InlineKeyboardMarkup()
    btn_check = types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{order_id}")
    markup.add(btn_check)

    bot.send_message(user_id, f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{invoice_url}\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=markup)

    NOWPAYMENTS_API_KEY = "—Ç–≤–æ—è_api_–∫–ª—é—á"

    @bot.callback_query_handler(func=lambda call: call.data.startswith("check_payment_"))
    def handle_check_payment(call):
        user_id = call.from_user.id
        order_id = call.data.split("_")[-1]

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –ë–î
        cursor.execute("SELECT tariff, status FROM pending_payments WHERE order_id=? AND user_id=?",
                       (order_id, user_id))
        row = cursor.fetchone()
        if not row:
            bot.send_message(user_id, "‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        tariff, status = row
        if status == "paid":
            bot.send_message(user_id, "‚úÖ –ü–ª–∞—Ç—ë–∂ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ NOWPayments
        headers = {"x-api-key": NOWPAYMENTS_API_KEY}
        response = requests.get(f"https://api.nowpayments.io/v1/payment/{order_id}", headers=headers)
        data = response.json()

        if data.get("payment_status") == "finished":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            cursor.execute("UPDATE pending_payments SET status='paid' WHERE order_id=?", (order_id,))
            conn.commit()

            # –ù–∞—á–∏—Å–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            searches_add = tariffs_amounts.get(tariff, 0)
            cursor.execute("SELECT searches, unlimited FROM search_limits WHERE user_id=?", (user_id,))
            row = cursor.fetchone()
            if row:
                searches, unlimited = row
                if not unlimited:
                    cursor.execute("UPDATE search_limits SET searches = searches + ? WHERE user_id=?",
                                   (searches_add, user_id))
            else:
                cursor.execute("INSERT INTO search_limits (user_id, searches, unlimited) VALUES (?, ?, 0)",
                               (user_id, searches_add))
            conn.commit()

            bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {searches_add} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
        else:
            bot.send_message(user_id, "‚ö† –ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
bot.infinity_polling()


