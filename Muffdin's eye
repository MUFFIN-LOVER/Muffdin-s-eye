import telebot
from telebot import types
from datetime import datetime
import html
import re
import sqlite3
import random
import time

# –¢–æ–∫–µ–Ω –∏ ID —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
bot = telebot.TeleBot("8212352418:AAGPJ1Ng0v8AD1sYhdRrD6rCX2rtr7LOVeI", parse_mode='HTML')
bot.remove_webhook()
me = 8295751364  # –¢–≤–æ–π Telegram user ID

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("game.db", check_same_thread=False)
cursor = conn.cursor()

# –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω–æ–≤
cursor.execute("""
CREATE TABLE IF NOT EXISTS admins (
    user_id INTEGER PRIMARY KEY
)
""")

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (URL, email, —Ç–µ–ª–µ—Ñ–æ–Ω)
cursor.execute("""
CREATE TABLE IF NOT EXISTS user_entities (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    entity_type TEXT,
    entity_value TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")

# –¢–∞–±–ª–∏—Ü—ã
cursor.execute("""
CREATE TABLE IF NOT EXISTS players (
    user_id INTEGER PRIMARY KEY,
    name TEXT,
    points INTEGER DEFAULT 0,
    last_dep INTEGER DEFAULT 0
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS chat_info (
    chat_id INTEGER,
    user_id INTEGER,
    title TEXT,
    username TEXT,
    type TEXT,
    PRIMARY KEY(chat_id, user_id)
)
""")

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
cursor.execute("""
CREATE TABLE IF NOT EXISTS user_info (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    is_bot INTEGER,
    phone_number TEXT,
    language_code TEXT
)
""")

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ username
cursor.execute("""
CREATE TABLE IF NOT EXISTS username_history (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    old_username TEXT,
    new_username TEXT,
    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")

cursor.execute("INSERT OR IGNORE INTO admins (user_id) VALUES (?)", (8295751364,))
conn.commit()

# === –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ===
items = [
    # –±–∞–∑–∞
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üí¥ ", "price": 5, "chance": 30},
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üíµ ", "price": 10, "chance": 25},
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üí∂ ", "price": 20, "chance": 20},
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üí∑ ", "price": 30, "chance": 15},

    # –ø–æ–≤–µ–∑–ª–æ
    {"emoji": "–Ω–∞—à—ë–ª üí∞ ", "price": 50, "chance": 10},
    {"emoji": "–Ω–∞—à—ë–ª üíé ", "price": 100, "chance": 5},
    {"emoji": "–æ–≥—Ä–∞–±–∏–ª –±–∞–Ω–∫ üè¶ ", "price": 200, "chance": 3},

    # –¥–∂–µ–∫–ø–æ—Ç
    {"emoji": "–Ω–∞—à—ë–ª üí≥ ", "price": random.randint(0, 500), "chance": 5},
    {"emoji": "–Ω–∞—à—ë–ª üìÄ —Å –±–∏—Ç–∫–æ–∏–Ω–∞–º–∏ ", "price": random.randint(300, 500), "chance": 2},

    # –ø–æ—Ç–µ—Ä—è
    {"emoji": "–ø—Ä–æ–ø–∏–ª üí∏ ", "price": -5, "chance": 15},
    {"emoji": "–¥–µ–ø–Ω—É–ª üí∏ ", "price": -10, "chance": 12},
    {"emoji": "–∑–∞–¥–æ–Ω–∞—Ç–∏–ª —Å—Ç—Ä–∏–º–µ—Ä—É üí∏ ", "price": -20, "chance": 10},

    # –ø–∞—Å—Ö–∞–ª–∫–∞
    {"emoji": "–≤—Å—Ç–µ—Ç–∏–ª Mr.Muffdinüëæ ", "price": 0.666, "chance": 1},
]

def save_user_info(message, contact=None):
    user = message.from_user

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π username
    cursor.execute("SELECT username FROM user_info WHERE user_id=?", (user.id,))
    row = cursor.fetchone()
    old_username = row[0] if row else None

    # –µ—Å–ª–∏ username –∏–∑–º–µ–Ω–∏–ª—Å—è -> –ª–æ–≥–∏—Ä—É–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    if old_username and old_username != user.username:
        cursor.execute("""
            INSERT INTO username_history (user_id, old_username, new_username)
            VALUES (?, ?, ?)
        """, (user.id, old_username, user.username))

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º user_info
    cursor.execute("""
        INSERT INTO user_info (user_id, username, first_name, last_name, is_bot, phone_number, language_code)
        VALUES (?, ?, ?, ?, ?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET
            username=excluded.username,
            first_name=excluded.first_name,
            last_name=excluded.last_name,
            is_bot=excluded.is_bot,
            phone_number=excluded.phone_number,
            language_code=excluded.language_code
    """, (
        user.id,
        user.username,
        user.first_name,
        user.last_name,
        int(user.is_bot),
        contact.phone_number if contact else None,
        user.language_code
    ))

    conn.commit()


def save_chat_info(message):
    chat = message.chat
    user = message.from_user
    cursor.execute("""
        INSERT INTO chat_info (chat_id, user_id, title, username, type)
        VALUES (?, ?, ?, ?, ?)
        ON CONFLICT(chat_id, user_id) DO UPDATE SET
            title=excluded.title,
            username=excluded.username,
            type=excluded.type
    """, (
        chat.id,
        user.id,
        getattr(chat, "title", None),
        getattr(chat, "username", None),
        chat.type
    ))
    conn.commit()

def roll_item():
    r = random.randint(1, sum(item["chance"] for item in items))
    cumulative = 0
    for item in items:
        cumulative += item["chance"]
        if r <= cumulative:
            # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–∂–µ–∫–ø–æ—Ç
            if item["emoji"] in ["–Ω–∞—à—ë–ª üí≥", "–Ω–∞—à—ë–ª üìÄ —Å –±–∏—Ç–∫–æ–∏–Ω–∞–º–∏"]:
                if item["emoji"] == "–Ω–∞—à—ë–ª üí≥":
                    item["price"] = random.randint(0, 500)
                else:
                    item["price"] = random.randint(300, 500)
            return item

# === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î ===
def get_player(user_id, name):
    cursor.execute("SELECT * FROM players WHERE user_id=?", (user_id,))
    player = cursor.fetchone()
    if not player:
        cursor.execute("INSERT INTO players (user_id, name) VALUES (?, ?)", (user_id, name))
        conn.commit()
        return (user_id, name, 0, 0)
    else:
        cursor.execute("UPDATE players SET name=? WHERE user_id=?", (name, user_id))
        conn.commit()
        return player

def update_player(user_id, points=None, last_dep=None):
    if points is not None and last_dep is not None:
        cursor.execute("UPDATE players SET points=?, last_dep=? WHERE user_id=?", (points, last_dep, user_id))
    elif points is not None:
        cursor.execute("UPDATE players SET points=? WHERE user_id=?", (points, user_id))
    elif last_dep is not None:
        cursor.execute("UPDATE players SET last_dep=? WHERE user_id=?", (last_dep, user_id))
    conn.commit()

# === –ö–æ–º–∞–Ω–¥—ã –∏–≥—Ä—ã ===
@bot.message_handler(commands=["dep"])
def dep(message):
    user_id = message.from_user.id
    name = message.from_user.first_name
    save_chat_info(message)   # –≤–º–µ—Å—Ç–æ register_chat
    player = get_player(user_id, name)
    points = player[2]
    last_dep = player[3]
    current_time = int(time.time())
    if current_time - last_dep >= 8*3600:
        item = roll_item()
        new_points = points + item["price"]
        update_player(user_id, new_points, current_time)
        bot.reply_to(message, f"{name}, —Ç—ã {item['emoji']}{item['price']}‚Ç¨!\n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {new_points}‚Ç¨!")
    else:
        remaining = 8*3600 - (current_time - last_dep)
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        bot.reply_to(message, f"{name}, –∂–¥–∏ –µ—â—ë {hours} —á {minutes} –º–∏–Ω.")
    log_user_info(message)


@bot.message_handler(commands=["stats"])
def stats(message):
    user_id = message.from_user.id
    name = message.from_user.first_name
    save_chat_info(message)   # –≤–º–µ—Å—Ç–æ register_chat
    player = get_player(user_id, name)
    points = player[2]
    last_dep = player[3]
    current_time = int(time.time())
    if current_time - last_dep >= 8*3600:
        wait = "–ú–æ–∂–Ω–æ –¥–µ–ø–∞—Ç—å!"
    else:
        remaining = 8*3600 - (current_time - last_dep)
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        wait = f"–ñ–¥–∞—Ç—å –µ—â—ë {hours} —á {minutes} –º–∏–Ω"
    bot.reply_to(message, f"{name}, —Ç–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª: {points}\n{wait}")
    log_user_info(message)


@bot.message_handler(commands=["topchat"])
def top_chat(message):
    chat_id = message.chat.id
    cursor.execute("""
        SELECT p.name, p.points FROM players p
        JOIN chat_info c ON p.user_id = c.user_id
        WHERE c.chat_id=? ORDER BY p.points DESC LIMIT 10
    """, (chat_id,))
    leaders = cursor.fetchall()
    text = "üèÜ –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤ —á–∞—Ç–∞:\n"
    for i, (name, points) in enumerate(leaders, start=1):
        text += f"{i}. {name} ‚Äî {points} ‚Ç¨!\n"
    bot.reply_to(message, text)
    log_user_info(message)


@bot.message_handler(commands=["topworld"])
def top_world(message):
    cursor.execute("SELECT name, points FROM players ORDER BY points DESC LIMIT 10")
    leaders = cursor.fetchall()
    text = "üåç –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤ –º–∏—Ä–∞:\n"
    for i, (name, points) in enumerate(leaders, start=1):
        text += f"{i}. {name} ‚Äî {points} ‚Ç¨!\n"
    bot.reply_to(message, text)
    log_user_info(message)

@bot.message_handler(commands=['start'])
def send_menu(message):
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")
        return
    chat_id = message.chat.id
    inline_markup = types.InlineKeyboardMarkup(row_width=2)
    btn_link1 = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª/—á–∞—Ç!", url="https://t.me/ArgusM_bot?startgroup=true")
    btn_link2 = types.InlineKeyboardButton("–ö–∞–Ω–∞–ª Mr.MUFFDINüëæ", url="https://t.me/+wDw25hUBPd1mMGVi")

    btn1 = types.InlineKeyboardButton("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞üëë", callback_data= "adminka")
    btn2 = types.InlineKeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—åüé≠", callback_data= "feedback")

    inline_markup.add(btn_link1, btn_link2)
    inline_markup.add(btn1, btn2)

    photo_path = r"Photo/photo_2025-09-20_17-49-18.jpg"
    with open(photo_path, "rb") as photo_file:
        bot.send_photo(chat_id, photo=photo_file, reply_markup=inline_markup)

    log_user_info(message)

@bot.callback_query_handler(func=lambda call: call.data in ["adminka", "feedback"])
def handle_menu_choice(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id  # –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç: –±–µ—Ä–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ call.from_user
    bot.answer_callback_query(call.id)

    if call.data == "adminka":
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–¥–º–∏–Ω–∞—Ö
        cursor.execute("SELECT 1 FROM admins WHERE user_id=?", (user_id,))
        if cursor.fetchone():
            bot.send_message(chat_id, "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–¥–º–∏–Ω–∫–∞ üëë")
        else:
            # –µ—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            btn_contact = types.KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
            markup.add(btn_contact)
            bot.send_message(chat_id, "–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä:", reply_markup=markup)

    elif call.data == "feedback":
        bot.send_message(chat_id, "–î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –≤–≤–µ–¥–∏ !! –ø–µ—Ä–µ–¥ —Å–≤–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
@bot.message_handler(func=lambda message: message.text and message.text.startswith("!!"))
def feedback_handler(message):
    # —É–±–∏—Ä–∞–µ–º !!
    feedback_text = message.text[2:].strip()

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
    bot.send_message(me,
                     f"–°–æ–æ–±—â–µ–Ω–∏–µ Mr.Muffdin –æ—Ç {message.from_user.first_name} (@{message.from_user.username}):\n\n{feedback_text}")

    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")


def save_entities(message):
    if not message.text:
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ Telegram
    if message.entities:
        relevant_types = {'url', 'email', 'phone_number'}
        for entity in message.entities:
            if entity.type in relevant_types:
                start = entity.offset
                end = start + entity.length
                value = message.text[start:end]
                cursor.execute("""
                               INSERT INTO user_entities (user_id, entity_type, entity_value)
                               VALUES (?, ?, ?)
                               """, (message.from_user.id, entity.type, value))

    # –ò –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ regex
    urls = re.findall(r'https?://\S+', message.text)
    emails = re.findall(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', message.text)

    for url in urls:
        cursor.execute("""
                       INSERT INTO user_entities (user_id, entity_type, entity_value)
                       VALUES (?, ?, ?)
                       """, (message.from_user.id, 'url', url))

    for email in emails:
        cursor.execute("""
                       INSERT INTO user_entities (user_id, entity_type, entity_value)
                       VALUES (?, ?, ?)
                       """, (message.from_user.id, 'email', email))

    conn.commit()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    if message.contact:
        log_user_info(message, contact=message.contact)

        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        def check_password(m):
            if m.text == "31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091":
                bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É üëë")
            else:
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")

        bot.register_next_step_handler(msg, check_password)
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

def log_user_info(message, contact=None):
    save_user_info(message, contact)
    save_chat_info(message)
    save_entities(message)  # —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–Ω–æ—Å—Ç–∏

@bot.message_handler(func=lambda message: message.text and message.text.startswith("@"))
def get_user_info_by_username(message):
    user_id = message.from_user.id

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω
    cursor.execute("SELECT 1 FROM admins WHERE user_id=?", (user_id,))
    if not cursor.fetchone():
        return

    username = message.text[1:]  # —É–±–∏—Ä–∞–µ–º @

    # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    cursor.execute("SELECT * FROM user_info WHERE username=?", (username,))
    user = cursor.fetchone()
    if not user:
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    uid = user[0]
    uname = user[1]
    fname = user[2]
    lname = user[3]
    is_bot = "–î–∞" if user[4] else "–ù–µ—Ç"
    phone = user[5] or "–ù–µ —É–∫–∞–∑–∞–Ω"
    lang = user[6] or "–ù–µ —É–∫–∞–∑–∞–Ω"

    # –∏—Å—Ç–æ—Ä–∏—è username
    cursor.execute(
        "SELECT old_username, new_username, changed_at FROM username_history WHERE user_id=? ORDER BY changed_at DESC",
        (uid,))
    history = cursor.fetchall()
    history_text = "\n".join([f"{old} ‚Üí {new} ({changed})" for old, new, changed in history]) or "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"

    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
    cursor.execute("SELECT COUNT(*) FROM chat_info WHERE user_id=?", (uid,))
    chats_count = cursor.fetchone()[0]

    # —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT entity_type, entity_value, created_at FROM user_entities WHERE user_id=?", (uid,))
    entities = cursor.fetchall()
    entities_text = "\n".join([f"{etype}: {value} ({created})" for etype, value, created in entities]) or "–ù–µ—Ç —Å—É—â–Ω–æ—Å—Ç–µ–π"

    bot.reply_to(message, f"""
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ @{username}:
ID: {uid}
–ò–º—è: {fname}
–§–∞–º–∏–ª–∏—è: {lname}
–ë–æ—Ç: {is_bot}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone}
–Ø–∑—ã–∫: {lang}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤: {chats_count}
–ò—Å—Ç–æ—Ä–∏—è username:
{history_text}
–°—É—â–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
{entities_text}
    """)

    @bot.message_handler(func=lambda message: True, content_types=['text'])
    def handle_entities(message):
        if message.text.startswith(('/', '!!', '@')):  # –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            return
        log_user_info(message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()

