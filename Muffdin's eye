import telebot
from telebot import types
from datetime import datetime
import html
import re
import sqlite3
import random
import time

# –¢–æ–∫–µ–Ω –∏ ID —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
bot = telebot.TeleBot("8212352418:AAGPJ1Ng0v8AD1sYhdRrD6rCX2rtr7LOVeI", parse_mode='HTML')
bot.remove_webhook()
me = 8295751364  # –¢–≤–æ–π Telegram user ID

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("game.db", check_same_thread=False)
cursor = conn.cursor()

# –¢–∞–±–ª–∏—Ü—ã
cursor.execute("""
CREATE TABLE IF NOT EXISTS players (
    user_id INTEGER PRIMARY KEY,
    name TEXT,
    points INTEGER DEFAULT 0,
    last_dep INTEGER DEFAULT 0
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS chats (
    user_id INTEGER,
    chat_id INTEGER,
    PRIMARY KEY(user_id, chat_id)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS info (
    user_id INTEGER,
    chat_id INTEGER,
    PRIMARY KEY(user_id, chat_id)
)
""")

conn.commit()

# === –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ===
items = [
    # –±–∞–∑–∞
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üí¥ ", "price": 5, "chance": 30},
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üíµ ", "price": 10, "chance": 25},
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üí∂ ", "price": 20, "chance": 20},
    {"emoji": "–∑–∞—Ä–∞–±–æ—Ç–∞–ª üí∑ ", "price": 30, "chance": 15},

    # –ø–æ–≤–µ–∑–ª–æ
    {"emoji": "–Ω–∞—à—ë–ª üí∞ ", "price": 50, "chance": 10},
    {"emoji": "–Ω–∞—à—ë–ª üíé ", "price": 100, "chance": 5},
    {"emoji": "–æ–≥—Ä–∞–±–∏–ª –±–∞–Ω–∫ üè¶ ", "price": 200, "chance": 3},

    # –¥–∂–µ–∫–ø–æ—Ç
    {"emoji": "–Ω–∞—à—ë–ª üí≥ ", "price": random.randint(0, 500), "chance": 5},
    {"emoji": "–Ω–∞—à—ë–ª üìÄ —Å –±–∏—Ç–∫–æ–∏–Ω–∞–º–∏ ", "price": random.randint(300, 500), "chance": 2},

    # –ø–æ—Ç–µ—Ä—è
    {"emoji": "–ø—Ä–æ–ø–∏–ª üí∏ ", "price": -5, "chance": 15},
    {"emoji": "–¥–µ–ø–Ω—É–ª üí∏ ", "price": -10, "chance": 12},
    {"emoji": "–∑–∞–¥–æ–Ω–∞—Ç–∏–ª —Å—Ç—Ä–∏–º–µ—Ä—É üí∏ ", "price": -20, "chance": 10},

    # –ø–∞—Å—Ö–∞–ª–∫–∞
    {"emoji": "–≤—Å—Ç–µ—Ç–∏–ª Mr.Muffdinüëæ ", "price": 0.666, "chance": 1},
]

def roll_item():
    r = random.randint(1, sum(item["chance"] for item in items))
    cumulative = 0
    for item in items:
        cumulative += item["chance"]
        if r <= cumulative:
            # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–∂–µ–∫–ø–æ—Ç
            if item["emoji"] in ["–Ω–∞—à—ë–ª üí≥", "–Ω–∞—à—ë–ª üìÄ —Å –±–∏—Ç–∫–æ–∏–Ω–∞–º–∏"]:
                if item["emoji"] == "–Ω–∞—à—ë–ª üí≥":
                    item["price"] = random.randint(0, 500)
                else:
                    item["price"] = random.randint(300, 500)
            return item

# === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î ===
def get_player(user_id, name):
    cursor.execute("SELECT * FROM players WHERE user_id=?", (user_id,))
    player = cursor.fetchone()
    if not player:
        cursor.execute("INSERT INTO players (user_id, name) VALUES (?, ?)", (user_id, name))
        conn.commit()
        return (user_id, name, 0, 0)
    else:
        cursor.execute("UPDATE players SET name=? WHERE user_id=?", (name, user_id))
        conn.commit()
        return player

def update_player(user_id, points=None, last_dep=None):
    if points is not None and last_dep is not None:
        cursor.execute("UPDATE players SET points=?, last_dep=? WHERE user_id=?", (points, last_dep, user_id))
    elif points is not None:
        cursor.execute("UPDATE players SET points=? WHERE user_id=?", (points, user_id))
    elif last_dep is not None:
        cursor.execute("UPDATE players SET last_dep=? WHERE user_id=?", (last_dep, user_id))
    conn.commit()

def register_chat(user_id, chat_id):
    cursor.execute("SELECT * FROM chats WHERE user_id=? AND chat_id=?", (user_id, chat_id))
    if not cursor.fetchone():
        cursor.execute("INSERT INTO chats (user_id, chat_id) VALUES (?, ?)", (user_id, chat_id))
        conn.commit()

def extract_relevant_entities(message):
    if not message.entities or not message.text:
        return []

    relevant_types = {'url', 'email', 'phone_number'}
    extracted = []

    for entity in message.entities:
        if entity.type in relevant_types:
            start = entity.offset
            end = start + entity.length
            entity_text = message.text[start:end]
            extracted.append(f"{entity.type}: {html.escape(entity_text)}")

    return extracted

# === –ö–æ–º–∞–Ω–¥—ã –∏–≥—Ä—ã ===
@bot.message_handler(commands=["dep"])
def dep(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    name = message.from_user.first_name
    register_chat(user_id, chat_id)
    player = get_player(user_id, name)
    points = player[2]
    last_dep = player[3]
    current_time = int(time.time())
    if current_time - last_dep >= 8*3600:
        item = roll_item()
        new_points = points + item["price"]
        update_player(user_id, new_points, current_time)
        bot.reply_to(message, f"{name}, —Ç—ã {item['emoji']}{item['price']}‚Ç¨!\n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {new_points}‚Ç¨!")
    else:
        remaining = 8*3600 - (current_time - last_dep)
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        bot.reply_to(message, f"{name}, –∂–¥–∏ –µ—â—ë {hours} —á {minutes} –º–∏–Ω.")
    log_user_info(message)

@bot.message_handler(commands=["stats"])
def stats(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    name = message.from_user.first_name
    register_chat(user_id, chat_id)
    player = get_player(user_id, name)
    points = player[2]
    last_dep = player[3]
    current_time = int(time.time())
    if current_time - last_dep >= 8*3600:
        wait = "–ú–æ–∂–Ω–æ –¥–µ–ø–∞—Ç—å!"
    else:
        remaining = 8*3600 - (current_time - last_dep)
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        wait = f"–ñ–¥–∞—Ç—å –µ—â—ë {hours} —á {minutes} –º–∏–Ω"
    bot.reply_to(message, f"{name}, —Ç–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª: {points}\n{wait}")
    log_user_info(message)

@bot.message_handler(commands=["topchat"])
def top_chat(message):
    chat_id = message.chat.id
    cursor.execute("""
        SELECT p.name, p.points FROM players p
        JOIN chats c ON p.user_id = c.user_id
        WHERE c.chat_id=? ORDER BY p.points DESC LIMIT 10
    """, (chat_id,))
    leaders = cursor.fetchall()
    text = "üèÜ –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤ —á–∞—Ç–∞:\n"
    for i, (name, points) in enumerate(leaders, start=1):
        text += f"{i}. {name} ‚Äî {points} ‚Ç¨!\n"
    bot.reply_to(message, text)
    log_user_info(message)

@bot.message_handler(commands=["topworld"])
def top_world(message):
    cursor.execute("SELECT name, points FROM players ORDER BY points DESC LIMIT 10")
    leaders = cursor.fetchall()
    text = "üåç –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤ –º–∏—Ä–∞:\n"
    for i, (name, points) in enumerate(leaders, start=1):
        text += f"{i}. {name} ‚Äî {points} ‚Ç¨!\n"
    bot.reply_to(message, text)
    log_user_info(message)

@bot.message_handler(commands=['start'])
def send_menu(message):
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")
        return
    chat_id = message.chat.id
    inline_markup = types.InlineKeyboardMarkup(row_width=2)
    btn_link1 = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª/—á–∞—Ç!", url="https://t.me/ArgusM_bot?startgroup=true")
    btn_link2 = types.InlineKeyboardButton("–ö–∞–Ω–∞–ª Mr.MUFFDINüëæ", url="https://t.me/+wDw25hUBPd1mMGVi")

    btn1 = types.InlineKeyboardButton("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞üëë", callback_data= "adminka")
    btn2 = types.InlineKeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—åüé≠", callback_data= "feedback")

    inline_markup.add(btn_link1, btn_link2)
    inline_markup.add(btn1, btn2)

    photo_path = r"Photo/photo_2025-09-20_17-49-18.jpg"
    with open(photo_path, "rb") as photo_file:
        bot.send_photo(chat_id, photo=photo_file, reply_markup=inline_markup)

    log_user_info(message)

@bot.callback_query_handler(func=lambda call: call.data in ["adminka", "feedback"])
def handle_menu_choice(call):
    chat_id = call.message.chat.id
    bot.answer_callback_query(call.id)

    if call.data == "adminka":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn_contact = types.KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        markup.add(btn_contact)
        bot.send_message(chat_id, "–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä:", reply_markup=markup)

    elif call.data == "feedback":
        bot.send_message(chat_id, "–î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –≤–≤–µ–¥–∏ !! –ø–µ—Ä–µ–¥ —Å–≤–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!")

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    if message.contact:
        log_user_info(message, contact=message.contact)

        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        def check_password(m):
            if m.text == "31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091":
                bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É üëë")
            else:
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")

        bot.register_next_step_handler(msg, check_password)
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

def log_user_info(message, contact=None):
    time_str = datetime.fromtimestamp(message.date).strftime("%d.%m.%Y %H:%M:%S")
    lines = ["<b>–õ–ò–ß–ù–û–°–¢–¨</b>"]

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if message.from_user.first_name:
        lines.append(f"–ò–º—è: {html.escape(message.from_user.first_name)}")
    if message.from_user.last_name:
        lines.append(f"–§–∞–º–∏–ª–∏—è: {html.escape(message.from_user.last_name)}")
    if message.from_user.username:
        lines.append(f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{html.escape(message.from_user.username)}")
    lines.append(f"ID: {message.from_user.id}")
    lines.append(f"–ë–æ—Ç: {message.from_user.is_bot}")
    if message.from_user.language_code:
        lines.append(f"–Ø–∑—ã–∫: {html.escape(message.from_user.language_code)}")
    lines.append(f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {time_str}\n")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
    lines.append("<b>–ß–ê–¢</b>")
    lines.append(f"ID –ß–∞—Ç–∞: {message.chat.id}")
    lines.append(f"–¢–∏–ø —á–∞—Ç–∞: {message.chat.type}")
    if message.chat.title:
        lines.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞: {html.escape(message.chat.title)}")
    if message.chat.username:
        lines.append(f"–Æ–∑–µ—Ä–Ω–µ–π–º —á–∞—Ç–∞: @{html.escape(message.chat.username)}")
    if message.new_chat_members:
        members = ', '.join(html.escape(u.first_name or '') for u in message.new_chat_members)
        lines.append(f"–ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {members}")

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if contact:
        lines.append(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {html.escape(contact.phone_number)}")

    base_info = "\n".join(lines)
    if len(base_info) > 4000:
        base_info = base_info[:3990] + "\n<i>–û–±—Ä–µ–∑–∞–Ω–æ...</i>"

    bot.send_message(me, base_info)
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()
